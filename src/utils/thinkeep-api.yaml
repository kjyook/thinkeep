openapi: 3.0.1
info:
  title: Thinkeep API
  description: 일기 작성 및 관리 API 문서
  contact:
    name: Thinkeep Team
    email: contact@thinkeep.com
  version: 1.0.0
servers:
  - url: http://13.209.69.235:8080
    description: Generated server url
security:
  - JWT: []
tags:
  - name: 테스트용 일기
    description: 일기 기능 테스트용 API (개발 전용)
  - name: 인증
    description: 로그인, 로그아웃, 회원 정보 조회 API
  - name: 뱃지
    description: 뱃지 관리 API
  - name: 퀴즈
    description: 일기 기반 회상 퀴즈 API
  - name: 사용자 뱃지
    description: 사용자에게 뱃지 부여 API
  - name: 일기 기록
    description: 일기 작성, 조회, 수정, 삭제 API
  - name: 사용자
    description: 사용자 관리 API
  - name: OpenAI 테스트
    description: OpenAI API 연결 테스트용 API
paths:
  /api/users/{userNo}:
    get:
      tags:
        - 사용자
      summary: 사용자 조회
      description: 사용자 번호로 사용자 정보를 조회합니다.
      operationId: getUserById
      parameters:
        - name: userNo
          in: path
          description: 사용자 번호
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Response'
      security:
        - JWT: []
    put:
      tags:
        - 사용자
      summary: 사용자 정보 수정
      description: 사용자 정보를 수정합니다.
      operationId: updateUser
      parameters:
        - name: userNo
          in: path
          description: 사용자 번호
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Response'
      security:
        - JWT: []
    delete:
      tags:
        - 사용자
      summary: 사용자 삭제
      description: 사용자를 삭제합니다.
      operationId: deleteUser
      parameters:
        - name: userNo
          in: path
          description: 사용자 번호
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
      security:
        - JWT: []
  /api/records/{recordId}:
    put:
      tags:
        - 일기 기록
      summary: 일기 수정
      description: 기존 일기를 수정합니다.
      operationId: updateRecord
      parameters:
        - name: userNo
          in: query
          description: 사용자 번호 (JWT 비활성화 시 필수)
          required: false
          schema:
            type: integer
            format: int64
        - name: recordId
          in: path
          description: 수정할 일기 ID
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecordCreateRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: object
      security:
        - JWT: []
    delete:
      tags:
        - 일기 기록
      summary: 일기 삭제
      description: 지정된 일기를 삭제합니다.
      operationId: deleteRecord
      parameters:
        - name: userNo
          in: query
          description: 사용자 번호 (JWT 비활성화 시 필수)
          required: false
          schema:
            type: integer
            format: int64
        - name: recordId
          in: path
          description: 삭제할 일기 ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: object
      security:
        - JWT: []
  /api/badges/{badgeId}:
    get:
      tags:
        - 뱃지
      summary: 특정 뱃지 조회
      description: 뱃지 ID로 특정 뱃지를 조회합니다.
      operationId: getBadge
      parameters:
        - name: badgeId
          in: path
          description: 뱃지 ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BadgeResponse'
      security:
        - JWT: []
    put:
      tags:
        - 뱃지
      summary: 뱃지 수정
      description: 기존 뱃지 정보를 수정합니다.
      operationId: updateBadge
      parameters:
        - name: badgeId
          in: path
          description: 뱃지 ID
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BadgeRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BadgeResponse'
      security:
        - JWT: []
    delete:
      tags:
        - 뱃지
      summary: 뱃지 삭제
      description: 뱃지를 삭제합니다.
      operationId: deleteBadge
      parameters:
        - name: badgeId
          in: path
          description: 뱃지 ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
      security:
        - JWT: []
  /api/users:
    get:
      tags:
        - 사용자
      summary: 모든 사용자 조회
      description: 모든 사용자 목록을 조회합니다.
      operationId: getAllUsers
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Response'
      security:
        - JWT: []
    post:
      tags:
        - 사용자
      summary: 회원가입
      description: 새로운 사용자를 생성합니다.
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRequest'
        required: true
      responses:
        '201':
          description: 회원가입 성공
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Response'
  /api/users/{userNo}/streak:
    get:
      tags:
        - 사용자
      summary: 사용자 스트릭 수 조회
      description: 사용자의 현재 streakCount를 반환합니다.
      operationId: getStreakCount
      parameters:
        - name: userNo
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StreakCountResponse'
    post:
      tags:
        - 사용자
      summary: 스트릭 카운트 증가
      description: 사용자의 연속 일기 작성 카운트를 증가시킵니다.
      operationId: increaseStreakCount
      parameters:
        - name: userNo
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserBadgeResponse'
      security:
        - JWT: []
  /api/user-badges:
    post:
      tags:
        - 사용자 뱃지
      summary: 사용자에게 뱃지 부여
      description: 특정 사용자에게 뱃지를 부여합니다.
      operationId: assignBadgeToUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserBadgeRequest'
        required: true
      responses:
        '200':
          description: 뱃지 부여 성공
          content:
            '*/*':
              schema:
                type: object
      security:
        - JWT: []
  /api/records:
    post:
      tags:
        - 일기 기록
      summary: 오늘 일기 작성
      description: 오늘 날짜로 새 일기를 작성합니다. JWT 비활성화 시 userNo 파라미터 필요.
      operationId: createTodayRecord
      parameters:
        - name: userNo
          in: query
          description: 사용자 번호 (JWT 비활성화 시 필수)
          required: false
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecordCreateRequest'
        required: true
      responses:
        '201':
          description: 일기 작성 성공
          content:
            '*/*':
              schema:
                type: object
        '400':
          description: 잘못된 요청 또는 이미 작성된 일기
          content:
            '*/*':
              schema:
                type: object
        '401':
          description: 인증 실패
          content:
            '*/*':
              schema:
                type: object
      security:
        - JWT: []
  /api/quizzes/submit:
    post:
      tags:
        - 퀴즈
      summary: 퀴즈 정답 제출
      description: 퀴즈의 정답을 제출하거나 건너뛰기를 처리합니다.
      operationId: submitQuiz
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuizSubmitRequest'
        required: true
      responses:
        '200':
          description: 정답 제출 성공
        '400':
          description: 잘못된 요청 데이터 또는 건너뛰기 횟수 초과
        '404':
          description: 존재하지 않는 퀴즈
      security:
        - JWT: []
  /api/quizzes/generate:
    post:
      tags:
        - 퀴즈
      summary: 개별 퀴즈 생성 (개발용)
      description: 특정 질문 시드를 기반으로 GPT를 이용해 퀴즈를 생성합니다. 개발 및 테스트용입니다.
      operationId: generateQuiz
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuestionSeed'
        required: true
      responses:
        '200':
          description: 퀴즈 생성 성공
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/QuizResponse'
        '400':
          description: 잘못된 질문 시드 데이터
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/QuizResponse'
        '500':
          description: GPT API 호출 실패
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/QuizResponse'
      security:
        - JWT: []
  /api/badges:
    get:
      tags:
        - 뱃지
      summary: 뱃지 전체 조회
      description: 모든 뱃지 목록을 조회합니다.
      operationId: getAllBadges
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BadgeResponse'
      security:
        - JWT: []
    post:
      tags:
        - 뱃지
      summary: 뱃지 등록
      description: 새로운 뱃지를 등록합니다.
      operationId: createBadge
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BadgeRequest'
        required: true
      responses:
        '200':
          description: 뱃지 등록 성공
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BadgeResponse'
      security:
        - JWT: []
  /api/auth/logout:
    post:
      tags:
        - 인증
      summary: 로그아웃
      description: 현재 세션을 종료합니다.
      operationId: logout
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LoginResponse'
      security:
        - JWT: []
  /api/auth/login:
    post:
      tags:
        - 인증
      summary: 일반 로그인
      description: 닉네임과 비밀번호로 로그인합니다.
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
        required: true
      responses:
        '200':
          description: 로그인 성공
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: 로그인 실패
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LoginResponse'
  /api/auth/kakao-login:
    post:
      tags:
        - 인증
      summary: 카카오 로그인
      description: 카카오 계정으로 로그인 또는 자동 회원가입합니다.
      operationId: kakaoLogin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KakaoLoginRequest'
        required: true
      responses:
        '200':
          description: 카카오 로그인 성공
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: 카카오 로그인 실패
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LoginResponse'
  /api/users/nickname/{nickname}:
    get:
      tags:
        - 사용자
      summary: 닉네임으로 사용자 조회
      description: 닉네임으로 사용자 정보를 조회합니다.
      operationId: getUserByNickname
      parameters:
        - name: nickname
          in: path
          description: 사용자 닉네임
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Response'
      security:
        - JWT: []
  /api/test/records/today:
    get:
      tags:
        - 테스트용 일기
      summary: 오늘 일기 확인
      description: 오늘 작성된 일기가 있는지 확인합니다.
      operationId: getTodayRecord
      parameters:
        - name: userNo
          in: query
          description: 사용자 번호
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /api/test/records/list:
    get:
      tags:
        - 테스트용 일기
      summary: 사용자 일기 목록 조회
      description: 특정 사용자의 모든 일기를 조회합니다.
      operationId: getRecordList
      parameters:
        - name: userNo
          in: query
          description: 사용자 번호
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Record'
  /api/test/records/create:
    get:
      tags:
        - 테스트용 일기
      summary: 테스트 일기 생성
      description: 개발용 더미 일기를 생성합니다.
      operationId: createTestRecord
      parameters:
        - name: userNo
          in: query
          description: 사용자 번호
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /api/test/openai:
    get:
      tags:
        - OpenAI 테스트
      summary: OpenAI API 연결 테스트
      description: ChatGPT API와의 연결 상태를 확인합니다. 개발 및 디버깅용입니다.
      operationId: testOpenAi
      responses:
        '200':
          description: OpenAI API 연결 성공 및 응답 반환
          content:
            '*/*':
              schema:
                type: string
        '500':
          description: OpenAI API 호출 실패 또는 네트워크 오류
          content:
            '*/*':
              schema:
                type: string
  /api/records/{date}:
    get:
      tags:
        - 일기 기록
      summary: 특정 날짜 일기 조회
      description: 지정된 날짜의 일기를 조회합니다.
      operationId: getRecordByDate
      parameters:
        - name: userNo
          in: query
          description: 사용자 번호 (JWT 비활성화 시 필수)
          required: false
          schema:
            type: integer
            format: int64
        - name: date
          in: path
          description: 조회할 날짜 (YYYY-MM-DD)
          required: true
          schema:
            type: string
          example: '2025-01-15'
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: object
      security:
        - JWT: []
  /api/records/user/{userNo}/all:
    get:
      tags:
        - 일기 기록
      summary: 사용자 전체 일기 목록 조회
      description: 특정 사용자의 모든 일기를 최신순으로 조회합니다.
      operationId: getAllRecordsByUser
      parameters:
        - name: userNo
          in: path
          description: 조회할 사용자 번호
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 일기 목록 조회 성공
          content:
            '*/*':
              schema:
                type: object
        '404':
          description: 사용자를 찾을 수 없음
          content:
            '*/*':
              schema:
                type: object
      security:
        - JWT: []
  /api/records/today:
    get:
      tags:
        - 일기 기록
      summary: 오늘 기록 상태 조회
      description: 오늘 일기 작성 상태를 확인합니다.
      operationId: getTodayRecordStatus
      parameters:
        - name: userNo
          in: query
          description: 사용자 번호 (JWT 비활성화 시 필수)
          required: false
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: object
      security:
        - JWT: []
  /api/records/emotions/{userNo}:
    get:
      tags:
        - 일기 기록
      summary: 월별 감정 데이터 조회
      description: 특정 월의 감정 데이터를 조회합니다. 기존 API를 활용하여 월별 필터링을 수행합니다.
      operationId: getMonthlyEmotions
      parameters:
        - name: userNo
          in: path
          description: 조회할 사용자 번호
          required: true
          schema:
            type: integer
            format: int64
        - name: year
          in: query
          description: 조회할 연도
          required: true
          schema:
            type: integer
            format: int32
          example: 2025
        - name: month
          in: query
          description: 조회할 월
          required: true
          schema:
            type: integer
            format: int32
          example: 7
      responses:
        '200':
          description: 월별 감정 데이터 조회 성공
          content:
            '*/*':
              schema:
                type: object
        '400':
          description: 잘못된 요청
          content:
            '*/*':
              schema:
                type: object
        '404':
          description: 사용자를 찾을 수 없음
          content:
            '*/*':
              schema:
                type: object
      security:
        - JWT: []
  /api/records/all:
    get:
      tags:
        - 일기 기록
      summary: 내 모든 일기 조회
      description: 현재 로그인된 사용자의 모든 일기를 조회합니다.
      operationId: getMyAllRecords
      parameters:
        - name: userNo
          in: query
          description: 사용자 번호 (JWT 비활성화 시 필수)
          required: false
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: object
      security:
        - JWT: []
  /api/quizzes/today:
    get:
      tags:
        - 퀴즈
      summary: 오늘의 퀴즈 생성
      description: 최근 3일간의 일기 기록을 바탕으로 오늘의 회상 퀴즈 2개를 생성합니다.
      operationId: getTodayQuizzes
      parameters:
        - name: userNo
          in: query
          description: 사용자 번호 (JWT 비활성화 시 필수)
          required: false
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 퀴즈 생성 성공
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/QuizResponse'
        '401':
          description: 인증 실패
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/QuizResponse'
        '404':
          description: 퀴즈 생성을 위한 충분한 기록이 없음
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/QuizResponse'
      security:
        - JWT: []
    delete:
      tags:
        - 퀴즈
      summary: 오늘 퀴즈 전체 삭제
      description: 오늘 생성된 모든 퀴즈를 삭제합니다.
      operationId: deleteTodayQuizzes
      parameters:
        - name: userNo
          in: query
          description: 사용자 번호 (JWT 비활성화 시 필수)
          required: false
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: 오늘 퀴즈 전체 삭제 성공
      security:
        - JWT: []
  /api/quizzes/today/wrong:
    get:
      tags:
        - 퀴즈
      summary: 오늘 오답 퀴즈 조회
      description: 오늘 풀었던 퀴즈 중 틀렸거나 건너뛴 퀴즈들을 조회합니다.
      operationId: getTodayWrongQuizzes
      parameters:
        - name: userNo
          in: query
          description: 사용자 번호 (JWT 비활성화 시 필수)
          required: false
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 오답 퀴즈 조회 성공
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/QuizResponse'
        '204':
          description: 오답 퀴즈가 없음
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/QuizResponse'
      security:
        - JWT: []
  /api/quizzes/today/skip-status:
    get:
      tags:
        - 퀴즈
      summary: 오늘 스킵 상태 조회
      description: 오늘 건너뛴 퀴즈 횟수와 남은 건너뛰기 가능 횟수를 조회합니다. (하루 최대 2회)
      operationId: getTodaySkipStatus
      parameters:
        - name: userNo
          in: query
          description: 사용자 번호 (JWT 비활성화 시 필수)
          required: false
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 스킵 상태 조회 성공
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SkipStatusResponse'
      security:
        - JWT: []
  /api/quizzes/today/retry-next:
    get:
      tags:
        - 퀴즈
      summary: 다음 재시도 퀴즈 조회
      description: 오답이거나 건너뛴 퀴즈 중 다음으로 재시도할 퀴즈 1개를 반환합니다.
      operationId: getNextRetryQuiz
      parameters:
        - name: userNo
          in: query
          description: 사용자 번호 (JWT 비활성화 시 필수)
          required: false
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 재시도 퀴즈 반환
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/QuizResponse'
        '204':
          description: 더 이상 재시도할 퀴즈가 없음
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/QuizResponse'
      security:
        - JWT: []
  /api/quizzes/today/result:
    get:
      tags:
        - 퀴즈
      summary: 오늘 퀴즈 결과 요약
      description: 오늘 풀었던 퀴즈의 총 문항 수와 정답 수를 요약해서 반환합니다.
      operationId: getTodayQuizResultSummary
      parameters:
        - name: userNo
          in: query
          description: 사용자 번호 (JWT 비활성화 시 필수)
          required: false
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 퀴즈 결과 요약 반환
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/QuizResultSummary'
      security:
        - JWT: []
  /api/auth/me:
    get:
      tags:
        - 인증
      summary: 현재 사용자 정보 조회
      description: JWT 토큰으로 현재 사용자 정보를 조회합니다.
      operationId: getCurrentUser
      responses:
        '200':
          description: 사용자 정보 조회 성공
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserInfo'
        '401':
          description: 인증 실패
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserInfo'
      security:
        - JWT: []
  /api/test/records/clear:
    delete:
      tags:
        - 테스트용 일기
      summary: 사용자 일기 전체 삭제
      description: 특정 사용자의 모든 일기를 삭제합니다. (개발용)
      operationId: clearAllRecords
      parameters:
        - name: userNo
          in: query
          description: 사용자 번호
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /api/quizzes/{quizId}:
    delete:
      tags:
        - 퀴즈
      summary: 단일 퀴즈 삭제
      description: 특정 퀴즈를 삭제합니다. 본인이 생성한 퀴즈만 삭제 가능합니다.
      operationId: deleteQuiz
      parameters:
        - name: quizId
          in: path
          description: 삭제할 퀴즈 ID
          required: true
          schema:
            type: integer
            format: int64
        - name: userNo
          in: query
          description: 사용자 번호 (JWT 비활성화 시 필수)
          required: false
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: 퀴즈 삭제 성공
        '403':
          description: 삭제 권한 없음
        '404':
          description: 존재하지 않는 퀴즈
      security:
        - JWT: []
components:
  schemas:
    UpdateRequest:
      type: object
      properties:
        profileImage:
          type: string
        gender:
          type: string
          enum:
            - MALE
            - FEMALE
            - OTHER
        birthDate:
          type: string
          format: date
        password:
          type: string
    Response:
      type: object
      properties:
        userNo:
          type: integer
          format: int64
        nickname:
          type: string
        profileImage:
          type: string
        gender:
          type: string
          enum:
            - MALE
            - FEMALE
            - OTHER
        birthDate:
          type: string
          format: date
        streakCount:
          type: integer
          format: int32
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        kakaoUser:
          type: boolean
    RecordCreateRequest:
      type: object
      properties:
        answers:
          type: object
          additionalProperties:
            type: string
        emotion:
          type: string
        valid:
          type: boolean
    BadgeRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        conditionJson:
          type: string
    BadgeResponse:
      type: object
      properties:
        badgeId:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        conditionJson:
          type: string
    CreateRequest:
      type: object
      properties:
        nickname:
          type: string
        password:
          type: string
        kakaoId:
          type: string
        profileImage:
          type: string
        gender:
          type: string
          enum:
            - MALE
            - FEMALE
            - OTHER
        birthDate:
          type: string
          format: date
        kakaoSignup:
          type: boolean
        generalSignup:
          type: boolean
    UserBadgeResponse:
      type: object
      properties:
        userNo:
          type: integer
          format: int64
        badgeId:
          type: integer
          format: int64
        awardedAt:
          type: string
          format: date-time
        streakCount:
          type: integer
          format: int32
    UserBadgeRequest:
      type: object
      properties:
        userNo:
          type: integer
          format: int64
        badgeId:
          type: integer
          format: int64
    QuizSubmitRequest:
      type: object
      properties:
        quizId:
          type: integer
          format: int64
        userAnswer:
          type: string
        skipped:
          type: boolean
    QuestionSeed:
      type: object
      properties:
        questionId:
          type: string
        question:
          type: string
        answer:
          type: string
        date:
          type: string
          format: date
        recordId:
          type: integer
          format: int64
    QuizResponse:
      type: object
      properties:
        quizId:
          type: integer
          format: int64
        context:
          type: string
        question:
          type: string
        choices:
          type: array
          items:
            type: string
        answer:
          type: string
    LoginResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        userNo:
          type: integer
          format: int64
        nickname:
          type: string
        accessToken:
          type: string
        expiresIn:
          type: integer
          format: int64
        kakaoUser:
          type: boolean
    LoginRequest:
      type: object
      properties:
        nickname:
          type: string
        password:
          type: string
        accessToken:
          type: string
        expiresIn:
          type: integer
          format: int64
    KakaoLoginRequest:
      required:
        - kakaoId
        - nickname
      type: object
      properties:
        kakaoId:
          type: string
          description: 카카오에서 제공하는 사용자 고유 ID
          example: '3234567890'
        nickname:
          maxLength: 50
          minLength: 1
          type: string
          description: 카카오 프로필에서 가져온 닉네임 (중복시 자동으로 숫자가 붙습니다)
          example: 홍길동
        profileImage:
          type: string
          description: 카카오 프로필 이미지 URL (선택사항, 없으면 null 또는 생략 가능)
          nullable: true
          example: https://k.kakaocdn.net/dn/profile_image.jpg
      description: 카카오 로그인 요청 DTO
    StreakCountResponse:
      type: object
      properties:
        userNo:
          type: integer
          format: int64
        streakCount:
          type: integer
          format: int32
    Record:
      type: object
      properties:
        recordId:
          type: integer
          format: int64
        userNo:
          type: integer
          format: int64
        date:
          type: string
          format: date
        answers:
          type: string
        emotion:
          type: string
        personCategory:
          type: string
        personName:
          type: string
        voiceText:
          type: string
        editableText:
          type: string
        submittedAnswer:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        answersAsMap:
          type: object
          additionalProperties:
            type: string
        answersFromMap:
          type: object
          additionalProperties:
            type: string
          writeOnly: true
        complete:
          type: boolean
        today:
          type: boolean
        answerCount:
          type: integer
          format: int32
    SkipStatusResponse:
      type: object
      properties:
        skippedCount:
          type: integer
          format: int32
        remainingSkips:
          type: integer
          format: int32
    QuizResultSummary:
      type: object
      properties:
        allCorrect:
          type: boolean
        totalSolved:
          type: integer
          format: int32
        correctCount:
          type: integer
          format: int32
    UserInfo:
      type: object
      properties:
        userNo:
          type: integer
          format: int64
        nickname:
          type: string
        profileImage:
          type: string
        gender:
          type: string
          enum:
            - MALE
            - FEMALE
            - OTHER
        birthDate:
          type: string
          format: date
        streakCount:
          type: integer
          format: int32
        createdAt:
          type: string
          format: date-time
        kakaoUser:
          type: boolean
  securitySchemes:
    JWT:
      type: http
      description: JWT 토큰을 입력하세요. 'Bearer ' 접두사는 자동으로 추가됩니다.
      scheme: bearer
      bearerFormat: JWT
