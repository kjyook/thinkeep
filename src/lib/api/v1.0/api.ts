/* tslint:disable */
/* eslint-disable */
/**
 * Thinkeep API
 * 일기 작성 및 관리 API 문서
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@thinkeep.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface BadgeRequest
 */
export interface BadgeRequest {
    /**
     * 
     * @type {string}
     * @memberof BadgeRequest
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof BadgeRequest
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof BadgeRequest
     */
    'conditionJson'?: string;
}
/**
 * 
 * @export
 * @interface BadgeResponse
 */
export interface BadgeResponse {
    /**
     * 
     * @type {number}
     * @memberof BadgeResponse
     */
    'badgeId'?: number;
    /**
     * 
     * @type {string}
     * @memberof BadgeResponse
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof BadgeResponse
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof BadgeResponse
     */
    'conditionJson'?: string;
}
/**
 * 
 * @export
 * @interface CreateRequest
 */
export interface CreateRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateRequest
     */
    'nickname'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateRequest
     */
    'password'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateRequest
     */
    'kakaoId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateRequest
     */
    'profileImage'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateRequest
     */
    'gender'?: CreateRequestGenderEnum;
    /**
     * 
     * @type {string}
     * @memberof CreateRequest
     */
    'birthDate'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CreateRequest
     */
    'kakaoSignup'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CreateRequest
     */
    'generalSignup'?: boolean;
}

export const CreateRequestGenderEnum = {
    Male: 'MALE',
    Female: 'FEMALE',
    Other: 'OTHER'
} as const;

export type CreateRequestGenderEnum = typeof CreateRequestGenderEnum[keyof typeof CreateRequestGenderEnum];

/**
 * 카카오 로그인 요청 DTO
 * @export
 * @interface KakaoLoginRequest
 */
export interface KakaoLoginRequest {
    /**
     * 카카오에서 제공하는 사용자 고유 ID
     * @type {string}
     * @memberof KakaoLoginRequest
     */
    'kakaoId': string;
    /**
     * 카카오 프로필에서 가져온 닉네임 (중복시 자동으로 숫자가 붙습니다)
     * @type {string}
     * @memberof KakaoLoginRequest
     */
    'nickname': string;
    /**
     * 카카오 프로필 이미지 URL (선택사항, 없으면 null 또는 생략 가능)
     * @type {string}
     * @memberof KakaoLoginRequest
     */
    'profileImage'?: string | null;
}
/**
 * 
 * @export
 * @interface LoginRequest
 */
export interface LoginRequest {
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    'nickname'?: string;
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    'password'?: string;
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    'accessToken'?: string;
    /**
     * 
     * @type {number}
     * @memberof LoginRequest
     */
    'expiresIn'?: number;
}
/**
 * 
 * @export
 * @interface LoginResponse
 */
export interface LoginResponse {
    /**
     * 
     * @type {boolean}
     * @memberof LoginResponse
     */
    'success'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof LoginResponse
     */
    'message'?: string;
    /**
     * 
     * @type {number}
     * @memberof LoginResponse
     */
    'userNo'?: number;
    /**
     * 
     * @type {string}
     * @memberof LoginResponse
     */
    'nickname'?: string;
    /**
     * 
     * @type {string}
     * @memberof LoginResponse
     */
    'accessToken'?: string;
    /**
     * 
     * @type {number}
     * @memberof LoginResponse
     */
    'expiresIn'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof LoginResponse
     */
    'kakaoUser'?: boolean;
}
/**
 * 
 * @export
 * @interface QuestionSeed
 */
export interface QuestionSeed {
    /**
     * 
     * @type {string}
     * @memberof QuestionSeed
     */
    'questionId'?: string;
    /**
     * 
     * @type {string}
     * @memberof QuestionSeed
     */
    'question'?: string;
    /**
     * 
     * @type {string}
     * @memberof QuestionSeed
     */
    'answer'?: string;
    /**
     * 
     * @type {string}
     * @memberof QuestionSeed
     */
    'date'?: string;
    /**
     * 
     * @type {number}
     * @memberof QuestionSeed
     */
    'recordId'?: number;
}
/**
 * 
 * @export
 * @interface QuizResponse
 */
export interface QuizResponse {
    /**
     * 
     * @type {number}
     * @memberof QuizResponse
     */
    'quizId'?: number;
    /**
     * 
     * @type {string}
     * @memberof QuizResponse
     */
    'context'?: string;
    /**
     * 
     * @type {string}
     * @memberof QuizResponse
     */
    'question'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof QuizResponse
     */
    'choices'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof QuizResponse
     */
    'answer'?: string;
}
/**
 * 
 * @export
 * @interface QuizResultSummary
 */
export interface QuizResultSummary {
    /**
     * 
     * @type {boolean}
     * @memberof QuizResultSummary
     */
    'allCorrect'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof QuizResultSummary
     */
    'totalSolved'?: number;
    /**
     * 
     * @type {number}
     * @memberof QuizResultSummary
     */
    'correctCount'?: number;
}
/**
 * 
 * @export
 * @interface QuizSubmitRequest
 */
export interface QuizSubmitRequest {
    /**
     * 
     * @type {number}
     * @memberof QuizSubmitRequest
     */
    'quizId'?: number;
    /**
     * 
     * @type {string}
     * @memberof QuizSubmitRequest
     */
    'userAnswer'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof QuizSubmitRequest
     */
    'skipped'?: boolean;
}
/**
 * 
 * @export
 * @interface Record
 */
export interface Record {
    /**
     * 
     * @type {number}
     * @memberof Record
     */
    'recordId'?: number;
    /**
     * 
     * @type {number}
     * @memberof Record
     */
    'userNo'?: number;
    /**
     * 
     * @type {string}
     * @memberof Record
     */
    'date'?: string;
    /**
     * 
     * @type {string}
     * @memberof Record
     */
    'answers'?: string;
    /**
     * 
     * @type {string}
     * @memberof Record
     */
    'emotion'?: string;
    /**
     * 
     * @type {string}
     * @memberof Record
     */
    'personCategory'?: string;
    /**
     * 
     * @type {string}
     * @memberof Record
     */
    'personName'?: string;
    /**
     * 
     * @type {string}
     * @memberof Record
     */
    'voiceText'?: string;
    /**
     * 
     * @type {string}
     * @memberof Record
     */
    'editableText'?: string;
    /**
     * 
     * @type {string}
     * @memberof Record
     */
    'submittedAnswer'?: string;
    /**
     * 
     * @type {string}
     * @memberof Record
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Record
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof Record
     */
    'answersAsMap'?: { [key: string]: string; };
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof Record
     */
    'answersFromMap'?: { [key: string]: string; };
    /**
     * 
     * @type {boolean}
     * @memberof Record
     */
    'complete'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Record
     */
    'today'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof Record
     */
    'answerCount'?: number;
}
/**
 * 
 * @export
 * @interface RecordCreateRequest
 */
export interface RecordCreateRequest {
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof RecordCreateRequest
     */
    'answers'?: { [key: string]: string; };
    /**
     * 
     * @type {string}
     * @memberof RecordCreateRequest
     */
    'emotion'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof RecordCreateRequest
     */
    'valid'?: boolean;
}
/**
 * 
 * @export
 * @interface Response
 */
export interface Response {
    /**
     * 
     * @type {number}
     * @memberof Response
     */
    'userNo'?: number;
    /**
     * 
     * @type {string}
     * @memberof Response
     */
    'nickname'?: string;
    /**
     * 
     * @type {string}
     * @memberof Response
     */
    'profileImage'?: string;
    /**
     * 
     * @type {string}
     * @memberof Response
     */
    'gender'?: ResponseGenderEnum;
    /**
     * 
     * @type {string}
     * @memberof Response
     */
    'birthDate'?: string;
    /**
     * 
     * @type {number}
     * @memberof Response
     */
    'streakCount'?: number;
    /**
     * 
     * @type {string}
     * @memberof Response
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Response
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Response
     */
    'kakaoUser'?: boolean;
}

export const ResponseGenderEnum = {
    Male: 'MALE',
    Female: 'FEMALE',
    Other: 'OTHER'
} as const;

export type ResponseGenderEnum = typeof ResponseGenderEnum[keyof typeof ResponseGenderEnum];

/**
 * 
 * @export
 * @interface SkipStatusResponse
 */
export interface SkipStatusResponse {
    /**
     * 
     * @type {number}
     * @memberof SkipStatusResponse
     */
    'skippedCount'?: number;
    /**
     * 
     * @type {number}
     * @memberof SkipStatusResponse
     */
    'remainingSkips'?: number;
}
/**
 * 
 * @export
 * @interface StreakCountResponse
 */
export interface StreakCountResponse {
    /**
     * 
     * @type {number}
     * @memberof StreakCountResponse
     */
    'userNo'?: number;
    /**
     * 
     * @type {number}
     * @memberof StreakCountResponse
     */
    'streakCount'?: number;
}
/**
 * 
 * @export
 * @interface UpdateRequest
 */
export interface UpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof UpdateRequest
     */
    'profileImage'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateRequest
     */
    'gender'?: UpdateRequestGenderEnum;
    /**
     * 
     * @type {string}
     * @memberof UpdateRequest
     */
    'birthDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateRequest
     */
    'password'?: string;
}

export const UpdateRequestGenderEnum = {
    Male: 'MALE',
    Female: 'FEMALE',
    Other: 'OTHER'
} as const;

export type UpdateRequestGenderEnum = typeof UpdateRequestGenderEnum[keyof typeof UpdateRequestGenderEnum];

/**
 * 
 * @export
 * @interface UserBadgeRequest
 */
export interface UserBadgeRequest {
    /**
     * 
     * @type {number}
     * @memberof UserBadgeRequest
     */
    'userNo'?: number;
    /**
     * 
     * @type {number}
     * @memberof UserBadgeRequest
     */
    'badgeId'?: number;
}
/**
 * 
 * @export
 * @interface UserBadgeResponse
 */
export interface UserBadgeResponse {
    /**
     * 
     * @type {number}
     * @memberof UserBadgeResponse
     */
    'userNo'?: number;
    /**
     * 
     * @type {number}
     * @memberof UserBadgeResponse
     */
    'badgeId'?: number;
    /**
     * 
     * @type {string}
     * @memberof UserBadgeResponse
     */
    'awardedAt'?: string;
    /**
     * 
     * @type {number}
     * @memberof UserBadgeResponse
     */
    'streakCount'?: number;
}
/**
 * 
 * @export
 * @interface UserInfo
 */
export interface UserInfo {
    /**
     * 
     * @type {number}
     * @memberof UserInfo
     */
    'userNo'?: number;
    /**
     * 
     * @type {string}
     * @memberof UserInfo
     */
    'nickname'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserInfo
     */
    'profileImage'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserInfo
     */
    'gender'?: UserInfoGenderEnum;
    /**
     * 
     * @type {string}
     * @memberof UserInfo
     */
    'birthDate'?: string;
    /**
     * 
     * @type {number}
     * @memberof UserInfo
     */
    'streakCount'?: number;
    /**
     * 
     * @type {string}
     * @memberof UserInfo
     */
    'createdAt'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UserInfo
     */
    'kakaoUser'?: boolean;
}

export const UserInfoGenderEnum = {
    Male: 'MALE',
    Female: 'FEMALE',
    Other: 'OTHER'
} as const;

export type UserInfoGenderEnum = typeof UserInfoGenderEnum[keyof typeof UserInfoGenderEnum];


/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 특정 사용자에게 뱃지를 부여합니다.
         * @summary 사용자에게 뱃지 부여
         * @param {UserBadgeRequest} userBadgeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignBadgeToUser: async (userBadgeRequest: UserBadgeRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userBadgeRequest' is not null or undefined
            assertParamExists('assignBadgeToUser', 'userBadgeRequest', userBadgeRequest)
            const localVarPath = `/api/user-badges`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userBadgeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 특정 사용자의 모든 일기를 삭제합니다. (개발용)
         * @summary 사용자 일기 전체 삭제
         * @param {number} userNo 사용자 번호
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clearAllRecords: async (userNo: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userNo' is not null or undefined
            assertParamExists('clearAllRecords', 'userNo', userNo)
            const localVarPath = `/api/test/records/clear`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (userNo !== undefined) {
                localVarQueryParameter['userNo'] = userNo;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 새로운 뱃지를 등록합니다.
         * @summary 뱃지 등록
         * @param {BadgeRequest} badgeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBadge: async (badgeRequest: BadgeRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'badgeRequest' is not null or undefined
            assertParamExists('createBadge', 'badgeRequest', badgeRequest)
            const localVarPath = `/api/badges`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(badgeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 개발용 더미 일기를 생성합니다.
         * @summary 테스트 일기 생성
         * @param {number} userNo 사용자 번호
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTestRecord: async (userNo: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userNo' is not null or undefined
            assertParamExists('createTestRecord', 'userNo', userNo)
            const localVarPath = `/api/test/records/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (userNo !== undefined) {
                localVarQueryParameter['userNo'] = userNo;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 오늘 날짜로 새 일기를 작성합니다. JWT 비활성화 시 userNo 파라미터 필요.
         * @summary 오늘 일기 작성
         * @param {RecordCreateRequest} recordCreateRequest 
         * @param {number} [userNo] 사용자 번호 (JWT 비활성화 시 필수)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTodayRecord: async (recordCreateRequest: RecordCreateRequest, userNo?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'recordCreateRequest' is not null or undefined
            assertParamExists('createTodayRecord', 'recordCreateRequest', recordCreateRequest)
            const localVarPath = `/api/records`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (userNo !== undefined) {
                localVarQueryParameter['userNo'] = userNo;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(recordCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 새로운 사용자를 생성합니다.
         * @summary 회원가입
         * @param {CreateRequest} createRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser: async (createRequest: CreateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createRequest' is not null or undefined
            assertParamExists('createUser', 'createRequest', createRequest)
            const localVarPath = `/api/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 뱃지를 삭제합니다.
         * @summary 뱃지 삭제
         * @param {number} badgeId 뱃지 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBadge: async (badgeId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'badgeId' is not null or undefined
            assertParamExists('deleteBadge', 'badgeId', badgeId)
            const localVarPath = `/api/badges/{badgeId}`
                .replace(`{${"badgeId"}}`, encodeURIComponent(String(badgeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 특정 퀴즈를 삭제합니다. 본인이 생성한 퀴즈만 삭제 가능합니다.
         * @summary 단일 퀴즈 삭제
         * @param {number} quizId 삭제할 퀴즈 ID
         * @param {number} [userNo] 사용자 번호 (JWT 비활성화 시 필수)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteQuiz: async (quizId: number, userNo?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'quizId' is not null or undefined
            assertParamExists('deleteQuiz', 'quizId', quizId)
            const localVarPath = `/api/quizzes/{quizId}`
                .replace(`{${"quizId"}}`, encodeURIComponent(String(quizId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (userNo !== undefined) {
                localVarQueryParameter['userNo'] = userNo;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 지정된 일기를 삭제합니다.
         * @summary 일기 삭제
         * @param {number} recordId 삭제할 일기 ID
         * @param {number} [userNo] 사용자 번호 (JWT 비활성화 시 필수)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRecord: async (recordId: number, userNo?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'recordId' is not null or undefined
            assertParamExists('deleteRecord', 'recordId', recordId)
            const localVarPath = `/api/records/{recordId}`
                .replace(`{${"recordId"}}`, encodeURIComponent(String(recordId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (userNo !== undefined) {
                localVarQueryParameter['userNo'] = userNo;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 오늘 생성된 모든 퀴즈를 삭제합니다.
         * @summary 오늘 퀴즈 전체 삭제
         * @param {number} [userNo] 사용자 번호 (JWT 비활성화 시 필수)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTodayQuizzes: async (userNo?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/quizzes/today`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (userNo !== undefined) {
                localVarQueryParameter['userNo'] = userNo;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 사용자를 삭제합니다.
         * @summary 사용자 삭제
         * @param {number} userNo 사용자 번호
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser: async (userNo: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userNo' is not null or undefined
            assertParamExists('deleteUser', 'userNo', userNo)
            const localVarPath = `/api/users/{userNo}`
                .replace(`{${"userNo"}}`, encodeURIComponent(String(userNo)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 특정 질문 시드를 기반으로 GPT를 이용해 퀴즈를 생성합니다. 개발 및 테스트용입니다.
         * @summary 개별 퀴즈 생성 (개발용)
         * @param {QuestionSeed} questionSeed 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateQuiz: async (questionSeed: QuestionSeed, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'questionSeed' is not null or undefined
            assertParamExists('generateQuiz', 'questionSeed', questionSeed)
            const localVarPath = `/api/quizzes/generate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(questionSeed, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 모든 뱃지 목록을 조회합니다.
         * @summary 뱃지 전체 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllBadges: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/badges`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 특정 사용자의 모든 일기를 최신순으로 조회합니다.
         * @summary 사용자 전체 일기 목록 조회
         * @param {number} userNo 조회할 사용자 번호
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllRecordsByUser: async (userNo: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userNo' is not null or undefined
            assertParamExists('getAllRecordsByUser', 'userNo', userNo)
            const localVarPath = `/api/records/user/{userNo}/all`
                .replace(`{${"userNo"}}`, encodeURIComponent(String(userNo)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 모든 사용자 목록을 조회합니다.
         * @summary 모든 사용자 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsers: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 뱃지 ID로 특정 뱃지를 조회합니다.
         * @summary 특정 뱃지 조회
         * @param {number} badgeId 뱃지 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBadge: async (badgeId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'badgeId' is not null or undefined
            assertParamExists('getBadge', 'badgeId', badgeId)
            const localVarPath = `/api/badges/{badgeId}`
                .replace(`{${"badgeId"}}`, encodeURIComponent(String(badgeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * JWT 토큰으로 현재 사용자 정보를 조회합니다.
         * @summary 현재 사용자 정보 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUser: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/auth/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 특정 월의 감정 데이터를 조회합니다. 기존 API를 활용하여 월별 필터링을 수행합니다.
         * @summary 월별 감정 데이터 조회
         * @param {number} userNo 조회할 사용자 번호
         * @param {number} year 조회할 연도
         * @param {number} month 조회할 월
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMonthlyEmotions: async (userNo: number, year: number, month: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userNo' is not null or undefined
            assertParamExists('getMonthlyEmotions', 'userNo', userNo)
            // verify required parameter 'year' is not null or undefined
            assertParamExists('getMonthlyEmotions', 'year', year)
            // verify required parameter 'month' is not null or undefined
            assertParamExists('getMonthlyEmotions', 'month', month)
            const localVarPath = `/api/records/emotions/{userNo}`
                .replace(`{${"userNo"}}`, encodeURIComponent(String(userNo)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (year !== undefined) {
                localVarQueryParameter['year'] = year;
            }

            if (month !== undefined) {
                localVarQueryParameter['month'] = month;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 현재 로그인된 사용자의 모든 일기를 조회합니다.
         * @summary 내 모든 일기 조회
         * @param {number} [userNo] 사용자 번호 (JWT 비활성화 시 필수)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyAllRecords: async (userNo?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/records/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (userNo !== undefined) {
                localVarQueryParameter['userNo'] = userNo;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 오답이거나 건너뛴 퀴즈 중 다음으로 재시도할 퀴즈 1개를 반환합니다.
         * @summary 다음 재시도 퀴즈 조회
         * @param {number} [userNo] 사용자 번호 (JWT 비활성화 시 필수)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNextRetryQuiz: async (userNo?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/quizzes/today/retry-next`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (userNo !== undefined) {
                localVarQueryParameter['userNo'] = userNo;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 지정된 날짜의 일기를 조회합니다.
         * @summary 특정 날짜 일기 조회
         * @param {string} date 조회할 날짜 (YYYY-MM-DD)
         * @param {number} [userNo] 사용자 번호 (JWT 비활성화 시 필수)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecordByDate: async (date: string, userNo?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'date' is not null or undefined
            assertParamExists('getRecordByDate', 'date', date)
            const localVarPath = `/api/records/{date}`
                .replace(`{${"date"}}`, encodeURIComponent(String(date)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (userNo !== undefined) {
                localVarQueryParameter['userNo'] = userNo;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 특정 사용자의 모든 일기를 조회합니다.
         * @summary 사용자 일기 목록 조회
         * @param {number} userNo 사용자 번호
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecordList: async (userNo: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userNo' is not null or undefined
            assertParamExists('getRecordList', 'userNo', userNo)
            const localVarPath = `/api/test/records/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (userNo !== undefined) {
                localVarQueryParameter['userNo'] = userNo;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 사용자의 현재 streakCount를 반환합니다.
         * @summary 사용자 스트릭 수 조회
         * @param {number} userNo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStreakCount: async (userNo: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userNo' is not null or undefined
            assertParamExists('getStreakCount', 'userNo', userNo)
            const localVarPath = `/api/users/{userNo}/streak`
                .replace(`{${"userNo"}}`, encodeURIComponent(String(userNo)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 오늘 풀었던 퀴즈의 총 문항 수와 정답 수를 요약해서 반환합니다.
         * @summary 오늘 퀴즈 결과 요약
         * @param {number} [userNo] 사용자 번호 (JWT 비활성화 시 필수)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTodayQuizResultSummary: async (userNo?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/quizzes/today/result`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (userNo !== undefined) {
                localVarQueryParameter['userNo'] = userNo;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 최근 3일간의 일기 기록을 바탕으로 오늘의 회상 퀴즈 2개를 생성합니다.
         * @summary 오늘의 퀴즈 생성
         * @param {number} [userNo] 사용자 번호 (JWT 비활성화 시 필수)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTodayQuizzes: async (userNo?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/quizzes/today`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (userNo !== undefined) {
                localVarQueryParameter['userNo'] = userNo;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 오늘 작성된 일기가 있는지 확인합니다.
         * @summary 오늘 일기 확인
         * @param {number} userNo 사용자 번호
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTodayRecord: async (userNo: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userNo' is not null or undefined
            assertParamExists('getTodayRecord', 'userNo', userNo)
            const localVarPath = `/api/test/records/today`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (userNo !== undefined) {
                localVarQueryParameter['userNo'] = userNo;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 오늘 일기 작성 상태를 확인합니다.
         * @summary 오늘 기록 상태 조회
         * @param {number} [userNo] 사용자 번호 (JWT 비활성화 시 필수)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTodayRecordStatus: async (userNo?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/records/today`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (userNo !== undefined) {
                localVarQueryParameter['userNo'] = userNo;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 오늘 건너뛴 퀴즈 횟수와 남은 건너뛰기 가능 횟수를 조회합니다. (하루 최대 2회)
         * @summary 오늘 스킵 상태 조회
         * @param {number} [userNo] 사용자 번호 (JWT 비활성화 시 필수)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTodaySkipStatus: async (userNo?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/quizzes/today/skip-status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (userNo !== undefined) {
                localVarQueryParameter['userNo'] = userNo;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 오늘 풀었던 퀴즈 중 틀렸거나 건너뛴 퀴즈들을 조회합니다.
         * @summary 오늘 오답 퀴즈 조회
         * @param {number} [userNo] 사용자 번호 (JWT 비활성화 시 필수)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTodayWrongQuizzes: async (userNo?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/quizzes/today/wrong`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (userNo !== undefined) {
                localVarQueryParameter['userNo'] = userNo;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 사용자 번호로 사용자 정보를 조회합니다.
         * @summary 사용자 조회
         * @param {number} userNo 사용자 번호
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserById: async (userNo: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userNo' is not null or undefined
            assertParamExists('getUserById', 'userNo', userNo)
            const localVarPath = `/api/users/{userNo}`
                .replace(`{${"userNo"}}`, encodeURIComponent(String(userNo)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 닉네임으로 사용자 정보를 조회합니다.
         * @summary 닉네임으로 사용자 조회
         * @param {string} nickname 사용자 닉네임
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserByNickname: async (nickname: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'nickname' is not null or undefined
            assertParamExists('getUserByNickname', 'nickname', nickname)
            const localVarPath = `/api/users/nickname/{nickname}`
                .replace(`{${"nickname"}}`, encodeURIComponent(String(nickname)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 사용자의 연속 일기 작성 카운트를 증가시킵니다.
         * @summary 스트릭 카운트 증가
         * @param {number} userNo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        increaseStreakCount: async (userNo: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userNo' is not null or undefined
            assertParamExists('increaseStreakCount', 'userNo', userNo)
            const localVarPath = `/api/users/{userNo}/streak`
                .replace(`{${"userNo"}}`, encodeURIComponent(String(userNo)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 카카오 계정으로 로그인 또는 자동 회원가입합니다.
         * @summary 카카오 로그인
         * @param {KakaoLoginRequest} kakaoLoginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        kakaoLogin: async (kakaoLoginRequest: KakaoLoginRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'kakaoLoginRequest' is not null or undefined
            assertParamExists('kakaoLogin', 'kakaoLoginRequest', kakaoLoginRequest)
            const localVarPath = `/api/auth/kakao-login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(kakaoLoginRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 닉네임과 비밀번호로 로그인합니다.
         * @summary 일반 로그인
         * @param {LoginRequest} loginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login: async (loginRequest: LoginRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginRequest' is not null or undefined
            assertParamExists('login', 'loginRequest', loginRequest)
            const localVarPath = `/api/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 현재 세션을 종료합니다.
         * @summary 로그아웃
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/auth/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 퀴즈의 정답을 제출하거나 건너뛰기를 처리합니다.
         * @summary 퀴즈 정답 제출
         * @param {QuizSubmitRequest} quizSubmitRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitQuiz: async (quizSubmitRequest: QuizSubmitRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'quizSubmitRequest' is not null or undefined
            assertParamExists('submitQuiz', 'quizSubmitRequest', quizSubmitRequest)
            const localVarPath = `/api/quizzes/submit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(quizSubmitRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 기존 뱃지 정보를 수정합니다.
         * @summary 뱃지 수정
         * @param {number} badgeId 뱃지 ID
         * @param {BadgeRequest} badgeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBadge: async (badgeId: number, badgeRequest: BadgeRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'badgeId' is not null or undefined
            assertParamExists('updateBadge', 'badgeId', badgeId)
            // verify required parameter 'badgeRequest' is not null or undefined
            assertParamExists('updateBadge', 'badgeRequest', badgeRequest)
            const localVarPath = `/api/badges/{badgeId}`
                .replace(`{${"badgeId"}}`, encodeURIComponent(String(badgeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(badgeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 기존 일기를 수정합니다.
         * @summary 일기 수정
         * @param {number} recordId 수정할 일기 ID
         * @param {RecordCreateRequest} recordCreateRequest 
         * @param {number} [userNo] 사용자 번호 (JWT 비활성화 시 필수)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRecord: async (recordId: number, recordCreateRequest: RecordCreateRequest, userNo?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'recordId' is not null or undefined
            assertParamExists('updateRecord', 'recordId', recordId)
            // verify required parameter 'recordCreateRequest' is not null or undefined
            assertParamExists('updateRecord', 'recordCreateRequest', recordCreateRequest)
            const localVarPath = `/api/records/{recordId}`
                .replace(`{${"recordId"}}`, encodeURIComponent(String(recordId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (userNo !== undefined) {
                localVarQueryParameter['userNo'] = userNo;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(recordCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 사용자 정보를 수정합니다.
         * @summary 사용자 정보 수정
         * @param {number} userNo 사용자 번호
         * @param {UpdateRequest} updateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser: async (userNo: number, updateRequest: UpdateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userNo' is not null or undefined
            assertParamExists('updateUser', 'userNo', userNo)
            // verify required parameter 'updateRequest' is not null or undefined
            assertParamExists('updateUser', 'updateRequest', updateRequest)
            const localVarPath = `/api/users/{userNo}`
                .replace(`{${"userNo"}}`, encodeURIComponent(String(userNo)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 특정 사용자에게 뱃지를 부여합니다.
         * @summary 사용자에게 뱃지 부여
         * @param {UserBadgeRequest} userBadgeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async assignBadgeToUser(userBadgeRequest: UserBadgeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.assignBadgeToUser(userBadgeRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.assignBadgeToUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 특정 사용자의 모든 일기를 삭제합니다. (개발용)
         * @summary 사용자 일기 전체 삭제
         * @param {number} userNo 사용자 번호
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clearAllRecords(userNo: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.clearAllRecords(userNo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.clearAllRecords']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 새로운 뱃지를 등록합니다.
         * @summary 뱃지 등록
         * @param {BadgeRequest} badgeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createBadge(badgeRequest: BadgeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BadgeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createBadge(badgeRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createBadge']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 개발용 더미 일기를 생성합니다.
         * @summary 테스트 일기 생성
         * @param {number} userNo 사용자 번호
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTestRecord(userNo: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTestRecord(userNo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createTestRecord']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 오늘 날짜로 새 일기를 작성합니다. JWT 비활성화 시 userNo 파라미터 필요.
         * @summary 오늘 일기 작성
         * @param {RecordCreateRequest} recordCreateRequest 
         * @param {number} [userNo] 사용자 번호 (JWT 비활성화 시 필수)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTodayRecord(recordCreateRequest: RecordCreateRequest, userNo?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTodayRecord(recordCreateRequest, userNo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createTodayRecord']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 새로운 사용자를 생성합니다.
         * @summary 회원가입
         * @param {CreateRequest} createRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUser(createRequest: CreateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createUser(createRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 뱃지를 삭제합니다.
         * @summary 뱃지 삭제
         * @param {number} badgeId 뱃지 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteBadge(badgeId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBadge(badgeId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteBadge']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 특정 퀴즈를 삭제합니다. 본인이 생성한 퀴즈만 삭제 가능합니다.
         * @summary 단일 퀴즈 삭제
         * @param {number} quizId 삭제할 퀴즈 ID
         * @param {number} [userNo] 사용자 번호 (JWT 비활성화 시 필수)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteQuiz(quizId: number, userNo?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteQuiz(quizId, userNo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteQuiz']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 지정된 일기를 삭제합니다.
         * @summary 일기 삭제
         * @param {number} recordId 삭제할 일기 ID
         * @param {number} [userNo] 사용자 번호 (JWT 비활성화 시 필수)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRecord(recordId: number, userNo?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRecord(recordId, userNo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteRecord']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 오늘 생성된 모든 퀴즈를 삭제합니다.
         * @summary 오늘 퀴즈 전체 삭제
         * @param {number} [userNo] 사용자 번호 (JWT 비활성화 시 필수)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTodayQuizzes(userNo?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTodayQuizzes(userNo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteTodayQuizzes']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 사용자를 삭제합니다.
         * @summary 사용자 삭제
         * @param {number} userNo 사용자 번호
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUser(userNo: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUser(userNo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 특정 질문 시드를 기반으로 GPT를 이용해 퀴즈를 생성합니다. 개발 및 테스트용입니다.
         * @summary 개별 퀴즈 생성 (개발용)
         * @param {QuestionSeed} questionSeed 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateQuiz(questionSeed: QuestionSeed, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QuizResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.generateQuiz(questionSeed, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.generateQuiz']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 모든 뱃지 목록을 조회합니다.
         * @summary 뱃지 전체 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllBadges(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BadgeResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllBadges(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getAllBadges']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 특정 사용자의 모든 일기를 최신순으로 조회합니다.
         * @summary 사용자 전체 일기 목록 조회
         * @param {number} userNo 조회할 사용자 번호
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllRecordsByUser(userNo: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllRecordsByUser(userNo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getAllRecordsByUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 모든 사용자 목록을 조회합니다.
         * @summary 모든 사용자 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllUsers(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Response>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllUsers(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getAllUsers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 뱃지 ID로 특정 뱃지를 조회합니다.
         * @summary 특정 뱃지 조회
         * @param {number} badgeId 뱃지 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBadge(badgeId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BadgeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBadge(badgeId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getBadge']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * JWT 토큰으로 현재 사용자 정보를 조회합니다.
         * @summary 현재 사용자 정보 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCurrentUser(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCurrentUser(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getCurrentUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 특정 월의 감정 데이터를 조회합니다. 기존 API를 활용하여 월별 필터링을 수행합니다.
         * @summary 월별 감정 데이터 조회
         * @param {number} userNo 조회할 사용자 번호
         * @param {number} year 조회할 연도
         * @param {number} month 조회할 월
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMonthlyEmotions(userNo: number, year: number, month: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMonthlyEmotions(userNo, year, month, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getMonthlyEmotions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 현재 로그인된 사용자의 모든 일기를 조회합니다.
         * @summary 내 모든 일기 조회
         * @param {number} [userNo] 사용자 번호 (JWT 비활성화 시 필수)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMyAllRecords(userNo?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMyAllRecords(userNo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getMyAllRecords']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 오답이거나 건너뛴 퀴즈 중 다음으로 재시도할 퀴즈 1개를 반환합니다.
         * @summary 다음 재시도 퀴즈 조회
         * @param {number} [userNo] 사용자 번호 (JWT 비활성화 시 필수)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNextRetryQuiz(userNo?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QuizResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNextRetryQuiz(userNo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getNextRetryQuiz']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 지정된 날짜의 일기를 조회합니다.
         * @summary 특정 날짜 일기 조회
         * @param {string} date 조회할 날짜 (YYYY-MM-DD)
         * @param {number} [userNo] 사용자 번호 (JWT 비활성화 시 필수)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRecordByDate(date: string, userNo?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRecordByDate(date, userNo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getRecordByDate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 특정 사용자의 모든 일기를 조회합니다.
         * @summary 사용자 일기 목록 조회
         * @param {number} userNo 사용자 번호
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRecordList(userNo: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Record>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRecordList(userNo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getRecordList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 사용자의 현재 streakCount를 반환합니다.
         * @summary 사용자 스트릭 수 조회
         * @param {number} userNo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStreakCount(userNo: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StreakCountResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStreakCount(userNo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getStreakCount']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 오늘 풀었던 퀴즈의 총 문항 수와 정답 수를 요약해서 반환합니다.
         * @summary 오늘 퀴즈 결과 요약
         * @param {number} [userNo] 사용자 번호 (JWT 비활성화 시 필수)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTodayQuizResultSummary(userNo?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QuizResultSummary>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTodayQuizResultSummary(userNo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getTodayQuizResultSummary']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 최근 3일간의 일기 기록을 바탕으로 오늘의 회상 퀴즈 2개를 생성합니다.
         * @summary 오늘의 퀴즈 생성
         * @param {number} [userNo] 사용자 번호 (JWT 비활성화 시 필수)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTodayQuizzes(userNo?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<QuizResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTodayQuizzes(userNo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getTodayQuizzes']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 오늘 작성된 일기가 있는지 확인합니다.
         * @summary 오늘 일기 확인
         * @param {number} userNo 사용자 번호
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTodayRecord(userNo: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTodayRecord(userNo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getTodayRecord']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 오늘 일기 작성 상태를 확인합니다.
         * @summary 오늘 기록 상태 조회
         * @param {number} [userNo] 사용자 번호 (JWT 비활성화 시 필수)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTodayRecordStatus(userNo?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTodayRecordStatus(userNo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getTodayRecordStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 오늘 건너뛴 퀴즈 횟수와 남은 건너뛰기 가능 횟수를 조회합니다. (하루 최대 2회)
         * @summary 오늘 스킵 상태 조회
         * @param {number} [userNo] 사용자 번호 (JWT 비활성화 시 필수)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTodaySkipStatus(userNo?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SkipStatusResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTodaySkipStatus(userNo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getTodaySkipStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 오늘 풀었던 퀴즈 중 틀렸거나 건너뛴 퀴즈들을 조회합니다.
         * @summary 오늘 오답 퀴즈 조회
         * @param {number} [userNo] 사용자 번호 (JWT 비활성화 시 필수)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTodayWrongQuizzes(userNo?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<QuizResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTodayWrongQuizzes(userNo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getTodayWrongQuizzes']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 사용자 번호로 사용자 정보를 조회합니다.
         * @summary 사용자 조회
         * @param {number} userNo 사용자 번호
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserById(userNo: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserById(userNo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getUserById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 닉네임으로 사용자 정보를 조회합니다.
         * @summary 닉네임으로 사용자 조회
         * @param {string} nickname 사용자 닉네임
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserByNickname(nickname: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserByNickname(nickname, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getUserByNickname']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 사용자의 연속 일기 작성 카운트를 증가시킵니다.
         * @summary 스트릭 카운트 증가
         * @param {number} userNo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async increaseStreakCount(userNo: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserBadgeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.increaseStreakCount(userNo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.increaseStreakCount']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 카카오 계정으로 로그인 또는 자동 회원가입합니다.
         * @summary 카카오 로그인
         * @param {KakaoLoginRequest} kakaoLoginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async kakaoLogin(kakaoLoginRequest: KakaoLoginRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.kakaoLogin(kakaoLoginRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.kakaoLogin']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 닉네임과 비밀번호로 로그인합니다.
         * @summary 일반 로그인
         * @param {LoginRequest} loginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async login(loginRequest: LoginRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.login(loginRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.login']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 현재 세션을 종료합니다.
         * @summary 로그아웃
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logout(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logout(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.logout']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 퀴즈의 정답을 제출하거나 건너뛰기를 처리합니다.
         * @summary 퀴즈 정답 제출
         * @param {QuizSubmitRequest} quizSubmitRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async submitQuiz(quizSubmitRequest: QuizSubmitRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.submitQuiz(quizSubmitRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.submitQuiz']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 기존 뱃지 정보를 수정합니다.
         * @summary 뱃지 수정
         * @param {number} badgeId 뱃지 ID
         * @param {BadgeRequest} badgeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateBadge(badgeId: number, badgeRequest: BadgeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BadgeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateBadge(badgeId, badgeRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.updateBadge']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 기존 일기를 수정합니다.
         * @summary 일기 수정
         * @param {number} recordId 수정할 일기 ID
         * @param {RecordCreateRequest} recordCreateRequest 
         * @param {number} [userNo] 사용자 번호 (JWT 비활성화 시 필수)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateRecord(recordId: number, recordCreateRequest: RecordCreateRequest, userNo?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateRecord(recordId, recordCreateRequest, userNo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.updateRecord']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 사용자 정보를 수정합니다.
         * @summary 사용자 정보 수정
         * @param {number} userNo 사용자 번호
         * @param {UpdateRequest} updateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUser(userNo: number, updateRequest: UpdateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUser(userNo, updateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.updateUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 특정 사용자에게 뱃지를 부여합니다.
         * @summary 사용자에게 뱃지 부여
         * @param {UserBadgeRequest} userBadgeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignBadgeToUser(userBadgeRequest: UserBadgeRequest, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.assignBadgeToUser(userBadgeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 특정 사용자의 모든 일기를 삭제합니다. (개발용)
         * @summary 사용자 일기 전체 삭제
         * @param {number} userNo 사용자 번호
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clearAllRecords(userNo: number, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.clearAllRecords(userNo, options).then((request) => request(axios, basePath));
        },
        /**
         * 새로운 뱃지를 등록합니다.
         * @summary 뱃지 등록
         * @param {BadgeRequest} badgeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBadge(badgeRequest: BadgeRequest, options?: RawAxiosRequestConfig): AxiosPromise<BadgeResponse> {
            return localVarFp.createBadge(badgeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 개발용 더미 일기를 생성합니다.
         * @summary 테스트 일기 생성
         * @param {number} userNo 사용자 번호
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTestRecord(userNo: number, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.createTestRecord(userNo, options).then((request) => request(axios, basePath));
        },
        /**
         * 오늘 날짜로 새 일기를 작성합니다. JWT 비활성화 시 userNo 파라미터 필요.
         * @summary 오늘 일기 작성
         * @param {RecordCreateRequest} recordCreateRequest 
         * @param {number} [userNo] 사용자 번호 (JWT 비활성화 시 필수)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTodayRecord(recordCreateRequest: RecordCreateRequest, userNo?: number, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.createTodayRecord(recordCreateRequest, userNo, options).then((request) => request(axios, basePath));
        },
        /**
         * 새로운 사용자를 생성합니다.
         * @summary 회원가입
         * @param {CreateRequest} createRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser(createRequest: CreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<Response> {
            return localVarFp.createUser(createRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 뱃지를 삭제합니다.
         * @summary 뱃지 삭제
         * @param {number} badgeId 뱃지 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBadge(badgeId: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteBadge(badgeId, options).then((request) => request(axios, basePath));
        },
        /**
         * 특정 퀴즈를 삭제합니다. 본인이 생성한 퀴즈만 삭제 가능합니다.
         * @summary 단일 퀴즈 삭제
         * @param {number} quizId 삭제할 퀴즈 ID
         * @param {number} [userNo] 사용자 번호 (JWT 비활성화 시 필수)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteQuiz(quizId: number, userNo?: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteQuiz(quizId, userNo, options).then((request) => request(axios, basePath));
        },
        /**
         * 지정된 일기를 삭제합니다.
         * @summary 일기 삭제
         * @param {number} recordId 삭제할 일기 ID
         * @param {number} [userNo] 사용자 번호 (JWT 비활성화 시 필수)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRecord(recordId: number, userNo?: number, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.deleteRecord(recordId, userNo, options).then((request) => request(axios, basePath));
        },
        /**
         * 오늘 생성된 모든 퀴즈를 삭제합니다.
         * @summary 오늘 퀴즈 전체 삭제
         * @param {number} [userNo] 사용자 번호 (JWT 비활성화 시 필수)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTodayQuizzes(userNo?: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteTodayQuizzes(userNo, options).then((request) => request(axios, basePath));
        },
        /**
         * 사용자를 삭제합니다.
         * @summary 사용자 삭제
         * @param {number} userNo 사용자 번호
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser(userNo: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteUser(userNo, options).then((request) => request(axios, basePath));
        },
        /**
         * 특정 질문 시드를 기반으로 GPT를 이용해 퀴즈를 생성합니다. 개발 및 테스트용입니다.
         * @summary 개별 퀴즈 생성 (개발용)
         * @param {QuestionSeed} questionSeed 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateQuiz(questionSeed: QuestionSeed, options?: RawAxiosRequestConfig): AxiosPromise<QuizResponse> {
            return localVarFp.generateQuiz(questionSeed, options).then((request) => request(axios, basePath));
        },
        /**
         * 모든 뱃지 목록을 조회합니다.
         * @summary 뱃지 전체 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllBadges(options?: RawAxiosRequestConfig): AxiosPromise<Array<BadgeResponse>> {
            return localVarFp.getAllBadges(options).then((request) => request(axios, basePath));
        },
        /**
         * 특정 사용자의 모든 일기를 최신순으로 조회합니다.
         * @summary 사용자 전체 일기 목록 조회
         * @param {number} userNo 조회할 사용자 번호
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllRecordsByUser(userNo: number, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getAllRecordsByUser(userNo, options).then((request) => request(axios, basePath));
        },
        /**
         * 모든 사용자 목록을 조회합니다.
         * @summary 모든 사용자 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsers(options?: RawAxiosRequestConfig): AxiosPromise<Array<Response>> {
            return localVarFp.getAllUsers(options).then((request) => request(axios, basePath));
        },
        /**
         * 뱃지 ID로 특정 뱃지를 조회합니다.
         * @summary 특정 뱃지 조회
         * @param {number} badgeId 뱃지 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBadge(badgeId: number, options?: RawAxiosRequestConfig): AxiosPromise<BadgeResponse> {
            return localVarFp.getBadge(badgeId, options).then((request) => request(axios, basePath));
        },
        /**
         * JWT 토큰으로 현재 사용자 정보를 조회합니다.
         * @summary 현재 사용자 정보 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUser(options?: RawAxiosRequestConfig): AxiosPromise<UserInfo> {
            return localVarFp.getCurrentUser(options).then((request) => request(axios, basePath));
        },
        /**
         * 특정 월의 감정 데이터를 조회합니다. 기존 API를 활용하여 월별 필터링을 수행합니다.
         * @summary 월별 감정 데이터 조회
         * @param {number} userNo 조회할 사용자 번호
         * @param {number} year 조회할 연도
         * @param {number} month 조회할 월
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMonthlyEmotions(userNo: number, year: number, month: number, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getMonthlyEmotions(userNo, year, month, options).then((request) => request(axios, basePath));
        },
        /**
         * 현재 로그인된 사용자의 모든 일기를 조회합니다.
         * @summary 내 모든 일기 조회
         * @param {number} [userNo] 사용자 번호 (JWT 비활성화 시 필수)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyAllRecords(userNo?: number, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getMyAllRecords(userNo, options).then((request) => request(axios, basePath));
        },
        /**
         * 오답이거나 건너뛴 퀴즈 중 다음으로 재시도할 퀴즈 1개를 반환합니다.
         * @summary 다음 재시도 퀴즈 조회
         * @param {number} [userNo] 사용자 번호 (JWT 비활성화 시 필수)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNextRetryQuiz(userNo?: number, options?: RawAxiosRequestConfig): AxiosPromise<QuizResponse> {
            return localVarFp.getNextRetryQuiz(userNo, options).then((request) => request(axios, basePath));
        },
        /**
         * 지정된 날짜의 일기를 조회합니다.
         * @summary 특정 날짜 일기 조회
         * @param {string} date 조회할 날짜 (YYYY-MM-DD)
         * @param {number} [userNo] 사용자 번호 (JWT 비활성화 시 필수)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecordByDate(date: string, userNo?: number, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getRecordByDate(date, userNo, options).then((request) => request(axios, basePath));
        },
        /**
         * 특정 사용자의 모든 일기를 조회합니다.
         * @summary 사용자 일기 목록 조회
         * @param {number} userNo 사용자 번호
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecordList(userNo: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<Record>> {
            return localVarFp.getRecordList(userNo, options).then((request) => request(axios, basePath));
        },
        /**
         * 사용자의 현재 streakCount를 반환합니다.
         * @summary 사용자 스트릭 수 조회
         * @param {number} userNo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStreakCount(userNo: number, options?: RawAxiosRequestConfig): AxiosPromise<StreakCountResponse> {
            return localVarFp.getStreakCount(userNo, options).then((request) => request(axios, basePath));
        },
        /**
         * 오늘 풀었던 퀴즈의 총 문항 수와 정답 수를 요약해서 반환합니다.
         * @summary 오늘 퀴즈 결과 요약
         * @param {number} [userNo] 사용자 번호 (JWT 비활성화 시 필수)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTodayQuizResultSummary(userNo?: number, options?: RawAxiosRequestConfig): AxiosPromise<QuizResultSummary> {
            return localVarFp.getTodayQuizResultSummary(userNo, options).then((request) => request(axios, basePath));
        },
        /**
         * 최근 3일간의 일기 기록을 바탕으로 오늘의 회상 퀴즈 2개를 생성합니다.
         * @summary 오늘의 퀴즈 생성
         * @param {number} [userNo] 사용자 번호 (JWT 비활성화 시 필수)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTodayQuizzes(userNo?: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<QuizResponse>> {
            return localVarFp.getTodayQuizzes(userNo, options).then((request) => request(axios, basePath));
        },
        /**
         * 오늘 작성된 일기가 있는지 확인합니다.
         * @summary 오늘 일기 확인
         * @param {number} userNo 사용자 번호
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTodayRecord(userNo: number, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.getTodayRecord(userNo, options).then((request) => request(axios, basePath));
        },
        /**
         * 오늘 일기 작성 상태를 확인합니다.
         * @summary 오늘 기록 상태 조회
         * @param {number} [userNo] 사용자 번호 (JWT 비활성화 시 필수)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTodayRecordStatus(userNo?: number, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getTodayRecordStatus(userNo, options).then((request) => request(axios, basePath));
        },
        /**
         * 오늘 건너뛴 퀴즈 횟수와 남은 건너뛰기 가능 횟수를 조회합니다. (하루 최대 2회)
         * @summary 오늘 스킵 상태 조회
         * @param {number} [userNo] 사용자 번호 (JWT 비활성화 시 필수)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTodaySkipStatus(userNo?: number, options?: RawAxiosRequestConfig): AxiosPromise<SkipStatusResponse> {
            return localVarFp.getTodaySkipStatus(userNo, options).then((request) => request(axios, basePath));
        },
        /**
         * 오늘 풀었던 퀴즈 중 틀렸거나 건너뛴 퀴즈들을 조회합니다.
         * @summary 오늘 오답 퀴즈 조회
         * @param {number} [userNo] 사용자 번호 (JWT 비활성화 시 필수)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTodayWrongQuizzes(userNo?: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<QuizResponse>> {
            return localVarFp.getTodayWrongQuizzes(userNo, options).then((request) => request(axios, basePath));
        },
        /**
         * 사용자 번호로 사용자 정보를 조회합니다.
         * @summary 사용자 조회
         * @param {number} userNo 사용자 번호
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserById(userNo: number, options?: RawAxiosRequestConfig): AxiosPromise<Response> {
            return localVarFp.getUserById(userNo, options).then((request) => request(axios, basePath));
        },
        /**
         * 닉네임으로 사용자 정보를 조회합니다.
         * @summary 닉네임으로 사용자 조회
         * @param {string} nickname 사용자 닉네임
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserByNickname(nickname: string, options?: RawAxiosRequestConfig): AxiosPromise<Response> {
            return localVarFp.getUserByNickname(nickname, options).then((request) => request(axios, basePath));
        },
        /**
         * 사용자의 연속 일기 작성 카운트를 증가시킵니다.
         * @summary 스트릭 카운트 증가
         * @param {number} userNo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        increaseStreakCount(userNo: number, options?: RawAxiosRequestConfig): AxiosPromise<UserBadgeResponse> {
            return localVarFp.increaseStreakCount(userNo, options).then((request) => request(axios, basePath));
        },
        /**
         * 카카오 계정으로 로그인 또는 자동 회원가입합니다.
         * @summary 카카오 로그인
         * @param {KakaoLoginRequest} kakaoLoginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        kakaoLogin(kakaoLoginRequest: KakaoLoginRequest, options?: RawAxiosRequestConfig): AxiosPromise<LoginResponse> {
            return localVarFp.kakaoLogin(kakaoLoginRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 닉네임과 비밀번호로 로그인합니다.
         * @summary 일반 로그인
         * @param {LoginRequest} loginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(loginRequest: LoginRequest, options?: RawAxiosRequestConfig): AxiosPromise<LoginResponse> {
            return localVarFp.login(loginRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 현재 세션을 종료합니다.
         * @summary 로그아웃
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout(options?: RawAxiosRequestConfig): AxiosPromise<LoginResponse> {
            return localVarFp.logout(options).then((request) => request(axios, basePath));
        },
        /**
         * 퀴즈의 정답을 제출하거나 건너뛰기를 처리합니다.
         * @summary 퀴즈 정답 제출
         * @param {QuizSubmitRequest} quizSubmitRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitQuiz(quizSubmitRequest: QuizSubmitRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.submitQuiz(quizSubmitRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 기존 뱃지 정보를 수정합니다.
         * @summary 뱃지 수정
         * @param {number} badgeId 뱃지 ID
         * @param {BadgeRequest} badgeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBadge(badgeId: number, badgeRequest: BadgeRequest, options?: RawAxiosRequestConfig): AxiosPromise<BadgeResponse> {
            return localVarFp.updateBadge(badgeId, badgeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 기존 일기를 수정합니다.
         * @summary 일기 수정
         * @param {number} recordId 수정할 일기 ID
         * @param {RecordCreateRequest} recordCreateRequest 
         * @param {number} [userNo] 사용자 번호 (JWT 비활성화 시 필수)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRecord(recordId: number, recordCreateRequest: RecordCreateRequest, userNo?: number, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.updateRecord(recordId, recordCreateRequest, userNo, options).then((request) => request(axios, basePath));
        },
        /**
         * 사용자 정보를 수정합니다.
         * @summary 사용자 정보 수정
         * @param {number} userNo 사용자 번호
         * @param {UpdateRequest} updateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser(userNo: number, updateRequest: UpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<Response> {
            return localVarFp.updateUser(userNo, updateRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 특정 사용자에게 뱃지를 부여합니다.
     * @summary 사용자에게 뱃지 부여
     * @param {UserBadgeRequest} userBadgeRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public assignBadgeToUser(userBadgeRequest: UserBadgeRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).assignBadgeToUser(userBadgeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 특정 사용자의 모든 일기를 삭제합니다. (개발용)
     * @summary 사용자 일기 전체 삭제
     * @param {number} userNo 사용자 번호
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public clearAllRecords(userNo: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).clearAllRecords(userNo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 새로운 뱃지를 등록합니다.
     * @summary 뱃지 등록
     * @param {BadgeRequest} badgeRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createBadge(badgeRequest: BadgeRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createBadge(badgeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 개발용 더미 일기를 생성합니다.
     * @summary 테스트 일기 생성
     * @param {number} userNo 사용자 번호
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createTestRecord(userNo: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createTestRecord(userNo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 오늘 날짜로 새 일기를 작성합니다. JWT 비활성화 시 userNo 파라미터 필요.
     * @summary 오늘 일기 작성
     * @param {RecordCreateRequest} recordCreateRequest 
     * @param {number} [userNo] 사용자 번호 (JWT 비활성화 시 필수)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createTodayRecord(recordCreateRequest: RecordCreateRequest, userNo?: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createTodayRecord(recordCreateRequest, userNo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 새로운 사용자를 생성합니다.
     * @summary 회원가입
     * @param {CreateRequest} createRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createUser(createRequest: CreateRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createUser(createRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 뱃지를 삭제합니다.
     * @summary 뱃지 삭제
     * @param {number} badgeId 뱃지 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteBadge(badgeId: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteBadge(badgeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 특정 퀴즈를 삭제합니다. 본인이 생성한 퀴즈만 삭제 가능합니다.
     * @summary 단일 퀴즈 삭제
     * @param {number} quizId 삭제할 퀴즈 ID
     * @param {number} [userNo] 사용자 번호 (JWT 비활성화 시 필수)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteQuiz(quizId: number, userNo?: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteQuiz(quizId, userNo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 지정된 일기를 삭제합니다.
     * @summary 일기 삭제
     * @param {number} recordId 삭제할 일기 ID
     * @param {number} [userNo] 사용자 번호 (JWT 비활성화 시 필수)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteRecord(recordId: number, userNo?: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteRecord(recordId, userNo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 오늘 생성된 모든 퀴즈를 삭제합니다.
     * @summary 오늘 퀴즈 전체 삭제
     * @param {number} [userNo] 사용자 번호 (JWT 비활성화 시 필수)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteTodayQuizzes(userNo?: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteTodayQuizzes(userNo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 사용자를 삭제합니다.
     * @summary 사용자 삭제
     * @param {number} userNo 사용자 번호
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteUser(userNo: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteUser(userNo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 특정 질문 시드를 기반으로 GPT를 이용해 퀴즈를 생성합니다. 개발 및 테스트용입니다.
     * @summary 개별 퀴즈 생성 (개발용)
     * @param {QuestionSeed} questionSeed 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public generateQuiz(questionSeed: QuestionSeed, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).generateQuiz(questionSeed, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 모든 뱃지 목록을 조회합니다.
     * @summary 뱃지 전체 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getAllBadges(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getAllBadges(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 특정 사용자의 모든 일기를 최신순으로 조회합니다.
     * @summary 사용자 전체 일기 목록 조회
     * @param {number} userNo 조회할 사용자 번호
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getAllRecordsByUser(userNo: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getAllRecordsByUser(userNo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 모든 사용자 목록을 조회합니다.
     * @summary 모든 사용자 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getAllUsers(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getAllUsers(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 뱃지 ID로 특정 뱃지를 조회합니다.
     * @summary 특정 뱃지 조회
     * @param {number} badgeId 뱃지 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getBadge(badgeId: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getBadge(badgeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * JWT 토큰으로 현재 사용자 정보를 조회합니다.
     * @summary 현재 사용자 정보 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getCurrentUser(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getCurrentUser(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 특정 월의 감정 데이터를 조회합니다. 기존 API를 활용하여 월별 필터링을 수행합니다.
     * @summary 월별 감정 데이터 조회
     * @param {number} userNo 조회할 사용자 번호
     * @param {number} year 조회할 연도
     * @param {number} month 조회할 월
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getMonthlyEmotions(userNo: number, year: number, month: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getMonthlyEmotions(userNo, year, month, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 현재 로그인된 사용자의 모든 일기를 조회합니다.
     * @summary 내 모든 일기 조회
     * @param {number} [userNo] 사용자 번호 (JWT 비활성화 시 필수)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getMyAllRecords(userNo?: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getMyAllRecords(userNo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 오답이거나 건너뛴 퀴즈 중 다음으로 재시도할 퀴즈 1개를 반환합니다.
     * @summary 다음 재시도 퀴즈 조회
     * @param {number} [userNo] 사용자 번호 (JWT 비활성화 시 필수)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getNextRetryQuiz(userNo?: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getNextRetryQuiz(userNo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 지정된 날짜의 일기를 조회합니다.
     * @summary 특정 날짜 일기 조회
     * @param {string} date 조회할 날짜 (YYYY-MM-DD)
     * @param {number} [userNo] 사용자 번호 (JWT 비활성화 시 필수)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getRecordByDate(date: string, userNo?: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getRecordByDate(date, userNo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 특정 사용자의 모든 일기를 조회합니다.
     * @summary 사용자 일기 목록 조회
     * @param {number} userNo 사용자 번호
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getRecordList(userNo: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getRecordList(userNo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 사용자의 현재 streakCount를 반환합니다.
     * @summary 사용자 스트릭 수 조회
     * @param {number} userNo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getStreakCount(userNo: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getStreakCount(userNo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 오늘 풀었던 퀴즈의 총 문항 수와 정답 수를 요약해서 반환합니다.
     * @summary 오늘 퀴즈 결과 요약
     * @param {number} [userNo] 사용자 번호 (JWT 비활성화 시 필수)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getTodayQuizResultSummary(userNo?: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getTodayQuizResultSummary(userNo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 최근 3일간의 일기 기록을 바탕으로 오늘의 회상 퀴즈 2개를 생성합니다.
     * @summary 오늘의 퀴즈 생성
     * @param {number} [userNo] 사용자 번호 (JWT 비활성화 시 필수)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getTodayQuizzes(userNo?: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getTodayQuizzes(userNo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 오늘 작성된 일기가 있는지 확인합니다.
     * @summary 오늘 일기 확인
     * @param {number} userNo 사용자 번호
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getTodayRecord(userNo: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getTodayRecord(userNo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 오늘 일기 작성 상태를 확인합니다.
     * @summary 오늘 기록 상태 조회
     * @param {number} [userNo] 사용자 번호 (JWT 비활성화 시 필수)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getTodayRecordStatus(userNo?: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getTodayRecordStatus(userNo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 오늘 건너뛴 퀴즈 횟수와 남은 건너뛰기 가능 횟수를 조회합니다. (하루 최대 2회)
     * @summary 오늘 스킵 상태 조회
     * @param {number} [userNo] 사용자 번호 (JWT 비활성화 시 필수)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getTodaySkipStatus(userNo?: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getTodaySkipStatus(userNo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 오늘 풀었던 퀴즈 중 틀렸거나 건너뛴 퀴즈들을 조회합니다.
     * @summary 오늘 오답 퀴즈 조회
     * @param {number} [userNo] 사용자 번호 (JWT 비활성화 시 필수)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getTodayWrongQuizzes(userNo?: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getTodayWrongQuizzes(userNo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 사용자 번호로 사용자 정보를 조회합니다.
     * @summary 사용자 조회
     * @param {number} userNo 사용자 번호
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getUserById(userNo: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getUserById(userNo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 닉네임으로 사용자 정보를 조회합니다.
     * @summary 닉네임으로 사용자 조회
     * @param {string} nickname 사용자 닉네임
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getUserByNickname(nickname: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getUserByNickname(nickname, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 사용자의 연속 일기 작성 카운트를 증가시킵니다.
     * @summary 스트릭 카운트 증가
     * @param {number} userNo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public increaseStreakCount(userNo: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).increaseStreakCount(userNo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 카카오 계정으로 로그인 또는 자동 회원가입합니다.
     * @summary 카카오 로그인
     * @param {KakaoLoginRequest} kakaoLoginRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public kakaoLogin(kakaoLoginRequest: KakaoLoginRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).kakaoLogin(kakaoLoginRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 닉네임과 비밀번호로 로그인합니다.
     * @summary 일반 로그인
     * @param {LoginRequest} loginRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public login(loginRequest: LoginRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).login(loginRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 현재 세션을 종료합니다.
     * @summary 로그아웃
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public logout(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).logout(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 퀴즈의 정답을 제출하거나 건너뛰기를 처리합니다.
     * @summary 퀴즈 정답 제출
     * @param {QuizSubmitRequest} quizSubmitRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public submitQuiz(quizSubmitRequest: QuizSubmitRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).submitQuiz(quizSubmitRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 기존 뱃지 정보를 수정합니다.
     * @summary 뱃지 수정
     * @param {number} badgeId 뱃지 ID
     * @param {BadgeRequest} badgeRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateBadge(badgeId: number, badgeRequest: BadgeRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateBadge(badgeId, badgeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 기존 일기를 수정합니다.
     * @summary 일기 수정
     * @param {number} recordId 수정할 일기 ID
     * @param {RecordCreateRequest} recordCreateRequest 
     * @param {number} [userNo] 사용자 번호 (JWT 비활성화 시 필수)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateRecord(recordId: number, recordCreateRequest: RecordCreateRequest, userNo?: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateRecord(recordId, recordCreateRequest, userNo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 사용자 정보를 수정합니다.
     * @summary 사용자 정보 수정
     * @param {number} userNo 사용자 번호
     * @param {UpdateRequest} updateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateUser(userNo: number, updateRequest: UpdateRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateUser(userNo, updateRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * OpenAIApi - axios parameter creator
 * @export
 */
export const OpenAIApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * ChatGPT API와의 연결 상태를 확인합니다. 개발 및 디버깅용입니다.
         * @summary OpenAI API 연결 테스트
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testOpenAi: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/test/openai`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OpenAIApi - functional programming interface
 * @export
 */
export const OpenAIApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OpenAIApiAxiosParamCreator(configuration)
    return {
        /**
         * ChatGPT API와의 연결 상태를 확인합니다. 개발 및 디버깅용입니다.
         * @summary OpenAI API 연결 테스트
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testOpenAi(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.testOpenAi(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpenAIApi.testOpenAi']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * OpenAIApi - factory interface
 * @export
 */
export const OpenAIApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OpenAIApiFp(configuration)
    return {
        /**
         * ChatGPT API와의 연결 상태를 확인합니다. 개발 및 디버깅용입니다.
         * @summary OpenAI API 연결 테스트
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testOpenAi(options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.testOpenAi(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OpenAIApi - object-oriented interface
 * @export
 * @class OpenAIApi
 * @extends {BaseAPI}
 */
export class OpenAIApi extends BaseAPI {
    /**
     * ChatGPT API와의 연결 상태를 확인합니다. 개발 및 디버깅용입니다.
     * @summary OpenAI API 연결 테스트
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenAIApi
     */
    public testOpenAi(options?: RawAxiosRequestConfig) {
        return OpenAIApiFp(this.configuration).testOpenAi(options).then((request) => request(this.axios, this.basePath));
    }
}



