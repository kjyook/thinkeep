/* tslint:disable */
/* eslint-disable */
/**
 * Thinkeep API
 * 일기 작성 및 관리 API 문서
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@thinkeep.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BadgeRequest,
  BadgeResponse,
  CreateRequest,
  KakaoLoginRequest,
  LoginRequest,
  LoginResponse,
  QuestionSeed,
  QuizResponse,
  QuizResultSummary,
  QuizSubmitRequest,
  Record,
  RecordCreateRequest,
  Response,
  SkipStatusResponse,
  StreakCountResponse,
  UpdateRequest,
  UserBadgeRequest,
  UserBadgeResponse,
  UserInfo,
} from '../models/index';
import {
    BadgeRequestFromJSON,
    BadgeRequestToJSON,
    BadgeResponseFromJSON,
    BadgeResponseToJSON,
    CreateRequestFromJSON,
    CreateRequestToJSON,
    KakaoLoginRequestFromJSON,
    KakaoLoginRequestToJSON,
    LoginRequestFromJSON,
    LoginRequestToJSON,
    LoginResponseFromJSON,
    LoginResponseToJSON,
    QuestionSeedFromJSON,
    QuestionSeedToJSON,
    QuizResponseFromJSON,
    QuizResponseToJSON,
    QuizResultSummaryFromJSON,
    QuizResultSummaryToJSON,
    QuizSubmitRequestFromJSON,
    QuizSubmitRequestToJSON,
    RecordFromJSON,
    RecordToJSON,
    RecordCreateRequestFromJSON,
    RecordCreateRequestToJSON,
    ResponseFromJSON,
    ResponseToJSON,
    SkipStatusResponseFromJSON,
    SkipStatusResponseToJSON,
    StreakCountResponseFromJSON,
    StreakCountResponseToJSON,
    UpdateRequestFromJSON,
    UpdateRequestToJSON,
    UserBadgeRequestFromJSON,
    UserBadgeRequestToJSON,
    UserBadgeResponseFromJSON,
    UserBadgeResponseToJSON,
    UserInfoFromJSON,
    UserInfoToJSON,
} from '../models/index';

export interface AssignBadgeToUserRequest {
    userBadgeRequest: UserBadgeRequest;
}

export interface ClearAllRecordsRequest {
    userNo: number;
}

export interface CreateBadgeRequest {
    badgeRequest: BadgeRequest;
}

export interface CreateTestRecordRequest {
    userNo: number;
}

export interface CreateTodayRecordRequest {
    recordCreateRequest: RecordCreateRequest;
    userNo?: number;
}

export interface CreateUserRequest {
    createRequest: CreateRequest;
}

export interface DeleteBadgeRequest {
    badgeId: number;
}

export interface DeleteQuizRequest {
    quizId: number;
    userNo?: number;
}

export interface DeleteRecordRequest {
    recordId: number;
    userNo?: number;
}

export interface DeleteTodayQuizzesRequest {
    userNo?: number;
}

export interface DeleteUserRequest {
    userNo: number;
}

export interface GenerateQuizRequest {
    questionSeed: QuestionSeed;
}

export interface GetAllRecordsByUserRequest {
    userNo: number;
}

export interface GetBadgeRequest {
    badgeId: number;
}

export interface GetMonthlyEmotionsRequest {
    userNo: number;
    year: number;
    month: number;
}

export interface GetMyAllRecordsRequest {
    userNo?: number;
}

export interface GetNextRetryQuizRequest {
    userNo?: number;
}

export interface GetRecordByDateRequest {
    date: string;
    userNo?: number;
}

export interface GetRecordListRequest {
    userNo: number;
}

export interface GetStreakCountRequest {
    userNo: number;
}

export interface GetTodayQuizResultSummaryRequest {
    userNo?: number;
}

export interface GetTodayQuizzesRequest {
    userNo?: number;
}

export interface GetTodayRecordRequest {
    userNo: number;
}

export interface GetTodayRecordStatusRequest {
    userNo?: number;
}

export interface GetTodaySkipStatusRequest {
    userNo?: number;
}

export interface GetTodayWrongQuizzesRequest {
    userNo?: number;
}

export interface GetUserByIdRequest {
    userNo: number;
}

export interface GetUserByNicknameRequest {
    nickname: string;
}

export interface IncreaseStreakCountRequest {
    userNo: number;
}

export interface KakaoLoginOperationRequest {
    kakaoLoginRequest: KakaoLoginRequest;
}

export interface LoginOperationRequest {
    loginRequest: LoginRequest;
}

export interface SubmitQuizRequest {
    quizSubmitRequest: QuizSubmitRequest;
}

export interface UpdateBadgeRequest {
    badgeId: number;
    badgeRequest: BadgeRequest;
}

export interface UpdateRecordRequest {
    recordId: number;
    recordCreateRequest: RecordCreateRequest;
    userNo?: number;
}

export interface UpdateUserRequest {
    userNo: number;
    updateRequest: UpdateRequest;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * 특정 사용자에게 뱃지를 부여합니다.
     * 사용자에게 뱃지 부여
     */
    async assignBadgeToUserRaw(requestParameters: AssignBadgeToUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['userBadgeRequest'] == null) {
            throw new runtime.RequiredError(
                'userBadgeRequest',
                'Required parameter "userBadgeRequest" was null or undefined when calling assignBadgeToUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/user-badges`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserBadgeRequestToJSON(requestParameters['userBadgeRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * 특정 사용자에게 뱃지를 부여합니다.
     * 사용자에게 뱃지 부여
     */
    async assignBadgeToUser(requestParameters: AssignBadgeToUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.assignBadgeToUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 특정 사용자의 모든 일기를 삭제합니다. (개발용)
     * 사용자 일기 전체 삭제
     */
    async clearAllRecordsRaw(requestParameters: ClearAllRecordsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['userNo'] == null) {
            throw new runtime.RequiredError(
                'userNo',
                'Required parameter "userNo" was null or undefined when calling clearAllRecords().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['userNo'] != null) {
            queryParameters['userNo'] = requestParameters['userNo'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/test/records/clear`;

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * 특정 사용자의 모든 일기를 삭제합니다. (개발용)
     * 사용자 일기 전체 삭제
     */
    async clearAllRecords(requestParameters: ClearAllRecordsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.clearAllRecordsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 새로운 뱃지를 등록합니다.
     * 뱃지 등록
     */
    async createBadgeRaw(requestParameters: CreateBadgeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BadgeResponse>> {
        if (requestParameters['badgeRequest'] == null) {
            throw new runtime.RequiredError(
                'badgeRequest',
                'Required parameter "badgeRequest" was null or undefined when calling createBadge().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/badges`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BadgeRequestToJSON(requestParameters['badgeRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BadgeResponseFromJSON(jsonValue));
    }

    /**
     * 새로운 뱃지를 등록합니다.
     * 뱃지 등록
     */
    async createBadge(requestParameters: CreateBadgeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BadgeResponse> {
        const response = await this.createBadgeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 개발용 더미 일기를 생성합니다.
     * 테스트 일기 생성
     */
    async createTestRecordRaw(requestParameters: CreateTestRecordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['userNo'] == null) {
            throw new runtime.RequiredError(
                'userNo',
                'Required parameter "userNo" was null or undefined when calling createTestRecord().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['userNo'] != null) {
            queryParameters['userNo'] = requestParameters['userNo'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/test/records/create`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * 개발용 더미 일기를 생성합니다.
     * 테스트 일기 생성
     */
    async createTestRecord(requestParameters: CreateTestRecordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.createTestRecordRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 오늘 날짜로 새 일기를 작성합니다. JWT 비활성화 시 userNo 파라미터 필요.
     * 오늘 일기 작성
     */
    async createTodayRecordRaw(requestParameters: CreateTodayRecordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['recordCreateRequest'] == null) {
            throw new runtime.RequiredError(
                'recordCreateRequest',
                'Required parameter "recordCreateRequest" was null or undefined when calling createTodayRecord().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['userNo'] != null) {
            queryParameters['userNo'] = requestParameters['userNo'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/records`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RecordCreateRequestToJSON(requestParameters['recordCreateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * 오늘 날짜로 새 일기를 작성합니다. JWT 비활성화 시 userNo 파라미터 필요.
     * 오늘 일기 작성
     */
    async createTodayRecord(requestParameters: CreateTodayRecordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.createTodayRecordRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 새로운 사용자를 생성합니다.
     * 회원가입
     */
    async createUserRaw(requestParameters: CreateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Response>> {
        if (requestParameters['createRequest'] == null) {
            throw new runtime.RequiredError(
                'createRequest',
                'Required parameter "createRequest" was null or undefined when calling createUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/users`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateRequestToJSON(requestParameters['createRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseFromJSON(jsonValue));
    }

    /**
     * 새로운 사용자를 생성합니다.
     * 회원가입
     */
    async createUser(requestParameters: CreateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Response> {
        const response = await this.createUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 뱃지를 삭제합니다.
     * 뱃지 삭제
     */
    async deleteBadgeRaw(requestParameters: DeleteBadgeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['badgeId'] == null) {
            throw new runtime.RequiredError(
                'badgeId',
                'Required parameter "badgeId" was null or undefined when calling deleteBadge().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/badges/{badgeId}`;
        urlPath = urlPath.replace(`{${"badgeId"}}`, encodeURIComponent(String(requestParameters['badgeId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 뱃지를 삭제합니다.
     * 뱃지 삭제
     */
    async deleteBadge(requestParameters: DeleteBadgeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteBadgeRaw(requestParameters, initOverrides);
    }

    /**
     * 특정 퀴즈를 삭제합니다. 본인이 생성한 퀴즈만 삭제 가능합니다.
     * 단일 퀴즈 삭제
     */
    async deleteQuizRaw(requestParameters: DeleteQuizRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['quizId'] == null) {
            throw new runtime.RequiredError(
                'quizId',
                'Required parameter "quizId" was null or undefined when calling deleteQuiz().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['userNo'] != null) {
            queryParameters['userNo'] = requestParameters['userNo'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/quizzes/{quizId}`;
        urlPath = urlPath.replace(`{${"quizId"}}`, encodeURIComponent(String(requestParameters['quizId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 특정 퀴즈를 삭제합니다. 본인이 생성한 퀴즈만 삭제 가능합니다.
     * 단일 퀴즈 삭제
     */
    async deleteQuiz(requestParameters: DeleteQuizRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteQuizRaw(requestParameters, initOverrides);
    }

    /**
     * 지정된 일기를 삭제합니다.
     * 일기 삭제
     */
    async deleteRecordRaw(requestParameters: DeleteRecordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['recordId'] == null) {
            throw new runtime.RequiredError(
                'recordId',
                'Required parameter "recordId" was null or undefined when calling deleteRecord().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['userNo'] != null) {
            queryParameters['userNo'] = requestParameters['userNo'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/records/{recordId}`;
        urlPath = urlPath.replace(`{${"recordId"}}`, encodeURIComponent(String(requestParameters['recordId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * 지정된 일기를 삭제합니다.
     * 일기 삭제
     */
    async deleteRecord(requestParameters: DeleteRecordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.deleteRecordRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 오늘 생성된 모든 퀴즈를 삭제합니다.
     * 오늘 퀴즈 전체 삭제
     */
    async deleteTodayQuizzesRaw(requestParameters: DeleteTodayQuizzesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['userNo'] != null) {
            queryParameters['userNo'] = requestParameters['userNo'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/quizzes/today`;

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 오늘 생성된 모든 퀴즈를 삭제합니다.
     * 오늘 퀴즈 전체 삭제
     */
    async deleteTodayQuizzes(requestParameters: DeleteTodayQuizzesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteTodayQuizzesRaw(requestParameters, initOverrides);
    }

    /**
     * 사용자를 삭제합니다.
     * 사용자 삭제
     */
    async deleteUserRaw(requestParameters: DeleteUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['userNo'] == null) {
            throw new runtime.RequiredError(
                'userNo',
                'Required parameter "userNo" was null or undefined when calling deleteUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/users/{userNo}`;
        urlPath = urlPath.replace(`{${"userNo"}}`, encodeURIComponent(String(requestParameters['userNo'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 사용자를 삭제합니다.
     * 사용자 삭제
     */
    async deleteUser(requestParameters: DeleteUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteUserRaw(requestParameters, initOverrides);
    }

    /**
     * 특정 질문 시드를 기반으로 GPT를 이용해 퀴즈를 생성합니다. 개발 및 테스트용입니다.
     * 개별 퀴즈 생성 (개발용)
     */
    async generateQuizRaw(requestParameters: GenerateQuizRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QuizResponse>> {
        if (requestParameters['questionSeed'] == null) {
            throw new runtime.RequiredError(
                'questionSeed',
                'Required parameter "questionSeed" was null or undefined when calling generateQuiz().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/quizzes/generate`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: QuestionSeedToJSON(requestParameters['questionSeed']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QuizResponseFromJSON(jsonValue));
    }

    /**
     * 특정 질문 시드를 기반으로 GPT를 이용해 퀴즈를 생성합니다. 개발 및 테스트용입니다.
     * 개별 퀴즈 생성 (개발용)
     */
    async generateQuiz(requestParameters: GenerateQuizRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QuizResponse> {
        const response = await this.generateQuizRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 모든 뱃지 목록을 조회합니다.
     * 뱃지 전체 조회
     */
    async getAllBadgesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<BadgeResponse>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/badges`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BadgeResponseFromJSON));
    }

    /**
     * 모든 뱃지 목록을 조회합니다.
     * 뱃지 전체 조회
     */
    async getAllBadges(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<BadgeResponse>> {
        const response = await this.getAllBadgesRaw(initOverrides);
        return await response.value();
    }

    /**
     * 특정 사용자의 모든 일기를 최신순으로 조회합니다.
     * 사용자 전체 일기 목록 조회
     */
    async getAllRecordsByUserRaw(requestParameters: GetAllRecordsByUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['userNo'] == null) {
            throw new runtime.RequiredError(
                'userNo',
                'Required parameter "userNo" was null or undefined when calling getAllRecordsByUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/records/user/{userNo}/all`;
        urlPath = urlPath.replace(`{${"userNo"}}`, encodeURIComponent(String(requestParameters['userNo'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * 특정 사용자의 모든 일기를 최신순으로 조회합니다.
     * 사용자 전체 일기 목록 조회
     */
    async getAllRecordsByUser(requestParameters: GetAllRecordsByUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.getAllRecordsByUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 모든 사용자 목록을 조회합니다.
     * 모든 사용자 조회
     */
    async getAllUsersRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Response>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/users`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ResponseFromJSON));
    }

    /**
     * 모든 사용자 목록을 조회합니다.
     * 모든 사용자 조회
     */
    async getAllUsers(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Response>> {
        const response = await this.getAllUsersRaw(initOverrides);
        return await response.value();
    }

    /**
     * 뱃지 ID로 특정 뱃지를 조회합니다.
     * 특정 뱃지 조회
     */
    async getBadgeRaw(requestParameters: GetBadgeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BadgeResponse>> {
        if (requestParameters['badgeId'] == null) {
            throw new runtime.RequiredError(
                'badgeId',
                'Required parameter "badgeId" was null or undefined when calling getBadge().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/badges/{badgeId}`;
        urlPath = urlPath.replace(`{${"badgeId"}}`, encodeURIComponent(String(requestParameters['badgeId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BadgeResponseFromJSON(jsonValue));
    }

    /**
     * 뱃지 ID로 특정 뱃지를 조회합니다.
     * 특정 뱃지 조회
     */
    async getBadge(requestParameters: GetBadgeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BadgeResponse> {
        const response = await this.getBadgeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * JWT 토큰으로 현재 사용자 정보를 조회합니다.
     * 현재 사용자 정보 조회
     */
    async getCurrentUserRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserInfo>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/auth/me`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserInfoFromJSON(jsonValue));
    }

    /**
     * JWT 토큰으로 현재 사용자 정보를 조회합니다.
     * 현재 사용자 정보 조회
     */
    async getCurrentUser(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserInfo> {
        const response = await this.getCurrentUserRaw(initOverrides);
        return await response.value();
    }

    /**
     * 특정 월의 감정 데이터를 조회합니다. 기존 API를 활용하여 월별 필터링을 수행합니다.
     * 월별 감정 데이터 조회
     */
    async getMonthlyEmotionsRaw(requestParameters: GetMonthlyEmotionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['userNo'] == null) {
            throw new runtime.RequiredError(
                'userNo',
                'Required parameter "userNo" was null or undefined when calling getMonthlyEmotions().'
            );
        }

        if (requestParameters['year'] == null) {
            throw new runtime.RequiredError(
                'year',
                'Required parameter "year" was null or undefined when calling getMonthlyEmotions().'
            );
        }

        if (requestParameters['month'] == null) {
            throw new runtime.RequiredError(
                'month',
                'Required parameter "month" was null or undefined when calling getMonthlyEmotions().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['year'] != null) {
            queryParameters['year'] = requestParameters['year'];
        }

        if (requestParameters['month'] != null) {
            queryParameters['month'] = requestParameters['month'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/records/emotions/{userNo}`;
        urlPath = urlPath.replace(`{${"userNo"}}`, encodeURIComponent(String(requestParameters['userNo'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * 특정 월의 감정 데이터를 조회합니다. 기존 API를 활용하여 월별 필터링을 수행합니다.
     * 월별 감정 데이터 조회
     */
    async getMonthlyEmotions(requestParameters: GetMonthlyEmotionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.getMonthlyEmotionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 현재 로그인된 사용자의 모든 일기를 조회합니다.
     * 내 모든 일기 조회
     */
    async getMyAllRecordsRaw(requestParameters: GetMyAllRecordsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        if (requestParameters['userNo'] != null) {
            queryParameters['userNo'] = requestParameters['userNo'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/records/all`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * 현재 로그인된 사용자의 모든 일기를 조회합니다.
     * 내 모든 일기 조회
     */
    async getMyAllRecords(requestParameters: GetMyAllRecordsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.getMyAllRecordsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 오답이거나 건너뛴 퀴즈 중 다음으로 재시도할 퀴즈 1개를 반환합니다.
     * 다음 재시도 퀴즈 조회
     */
    async getNextRetryQuizRaw(requestParameters: GetNextRetryQuizRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QuizResponse>> {
        const queryParameters: any = {};

        if (requestParameters['userNo'] != null) {
            queryParameters['userNo'] = requestParameters['userNo'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/quizzes/today/retry-next`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QuizResponseFromJSON(jsonValue));
    }

    /**
     * 오답이거나 건너뛴 퀴즈 중 다음으로 재시도할 퀴즈 1개를 반환합니다.
     * 다음 재시도 퀴즈 조회
     */
    async getNextRetryQuiz(requestParameters: GetNextRetryQuizRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QuizResponse> {
        const response = await this.getNextRetryQuizRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 지정된 날짜의 일기를 조회합니다.
     * 특정 날짜 일기 조회
     */
    async getRecordByDateRaw(requestParameters: GetRecordByDateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['date'] == null) {
            throw new runtime.RequiredError(
                'date',
                'Required parameter "date" was null or undefined when calling getRecordByDate().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['userNo'] != null) {
            queryParameters['userNo'] = requestParameters['userNo'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/records/{date}`;
        urlPath = urlPath.replace(`{${"date"}}`, encodeURIComponent(String(requestParameters['date'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * 지정된 날짜의 일기를 조회합니다.
     * 특정 날짜 일기 조회
     */
    async getRecordByDate(requestParameters: GetRecordByDateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.getRecordByDateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 특정 사용자의 모든 일기를 조회합니다.
     * 사용자 일기 목록 조회
     */
    async getRecordListRaw(requestParameters: GetRecordListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Record>>> {
        if (requestParameters['userNo'] == null) {
            throw new runtime.RequiredError(
                'userNo',
                'Required parameter "userNo" was null or undefined when calling getRecordList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['userNo'] != null) {
            queryParameters['userNo'] = requestParameters['userNo'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/test/records/list`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RecordFromJSON));
    }

    /**
     * 특정 사용자의 모든 일기를 조회합니다.
     * 사용자 일기 목록 조회
     */
    async getRecordList(requestParameters: GetRecordListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Record>> {
        const response = await this.getRecordListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 사용자의 현재 streakCount를 반환합니다.
     * 사용자 스트릭 수 조회
     */
    async getStreakCountRaw(requestParameters: GetStreakCountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StreakCountResponse>> {
        if (requestParameters['userNo'] == null) {
            throw new runtime.RequiredError(
                'userNo',
                'Required parameter "userNo" was null or undefined when calling getStreakCount().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/users/{userNo}/streak`;
        urlPath = urlPath.replace(`{${"userNo"}}`, encodeURIComponent(String(requestParameters['userNo'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StreakCountResponseFromJSON(jsonValue));
    }

    /**
     * 사용자의 현재 streakCount를 반환합니다.
     * 사용자 스트릭 수 조회
     */
    async getStreakCount(requestParameters: GetStreakCountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StreakCountResponse> {
        const response = await this.getStreakCountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 오늘 풀었던 퀴즈의 총 문항 수와 정답 수를 요약해서 반환합니다.
     * 오늘 퀴즈 결과 요약
     */
    async getTodayQuizResultSummaryRaw(requestParameters: GetTodayQuizResultSummaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QuizResultSummary>> {
        const queryParameters: any = {};

        if (requestParameters['userNo'] != null) {
            queryParameters['userNo'] = requestParameters['userNo'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/quizzes/today/result`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QuizResultSummaryFromJSON(jsonValue));
    }

    /**
     * 오늘 풀었던 퀴즈의 총 문항 수와 정답 수를 요약해서 반환합니다.
     * 오늘 퀴즈 결과 요약
     */
    async getTodayQuizResultSummary(requestParameters: GetTodayQuizResultSummaryRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QuizResultSummary> {
        const response = await this.getTodayQuizResultSummaryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 최근 3일간의 일기 기록을 바탕으로 오늘의 회상 퀴즈 2개를 생성합니다.
     * 오늘의 퀴즈 생성
     */
    async getTodayQuizzesRaw(requestParameters: GetTodayQuizzesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<QuizResponse>>> {
        const queryParameters: any = {};

        if (requestParameters['userNo'] != null) {
            queryParameters['userNo'] = requestParameters['userNo'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/quizzes/today`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(QuizResponseFromJSON));
    }

    /**
     * 최근 3일간의 일기 기록을 바탕으로 오늘의 회상 퀴즈 2개를 생성합니다.
     * 오늘의 퀴즈 생성
     */
    async getTodayQuizzes(requestParameters: GetTodayQuizzesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<QuizResponse>> {
        const response = await this.getTodayQuizzesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 오늘 작성된 일기가 있는지 확인합니다.
     * 오늘 일기 확인
     */
    async getTodayRecordRaw(requestParameters: GetTodayRecordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['userNo'] == null) {
            throw new runtime.RequiredError(
                'userNo',
                'Required parameter "userNo" was null or undefined when calling getTodayRecord().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['userNo'] != null) {
            queryParameters['userNo'] = requestParameters['userNo'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/test/records/today`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * 오늘 작성된 일기가 있는지 확인합니다.
     * 오늘 일기 확인
     */
    async getTodayRecord(requestParameters: GetTodayRecordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.getTodayRecordRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 오늘 일기 작성 상태를 확인합니다.
     * 오늘 기록 상태 조회
     */
    async getTodayRecordStatusRaw(requestParameters: GetTodayRecordStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        if (requestParameters['userNo'] != null) {
            queryParameters['userNo'] = requestParameters['userNo'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/records/today`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * 오늘 일기 작성 상태를 확인합니다.
     * 오늘 기록 상태 조회
     */
    async getTodayRecordStatus(requestParameters: GetTodayRecordStatusRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.getTodayRecordStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 오늘 건너뛴 퀴즈 횟수와 남은 건너뛰기 가능 횟수를 조회합니다. (하루 최대 2회)
     * 오늘 스킵 상태 조회
     */
    async getTodaySkipStatusRaw(requestParameters: GetTodaySkipStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SkipStatusResponse>> {
        const queryParameters: any = {};

        if (requestParameters['userNo'] != null) {
            queryParameters['userNo'] = requestParameters['userNo'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/quizzes/today/skip-status`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SkipStatusResponseFromJSON(jsonValue));
    }

    /**
     * 오늘 건너뛴 퀴즈 횟수와 남은 건너뛰기 가능 횟수를 조회합니다. (하루 최대 2회)
     * 오늘 스킵 상태 조회
     */
    async getTodaySkipStatus(requestParameters: GetTodaySkipStatusRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SkipStatusResponse> {
        const response = await this.getTodaySkipStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 오늘 풀었던 퀴즈 중 틀렸거나 건너뛴 퀴즈들을 조회합니다.
     * 오늘 오답 퀴즈 조회
     */
    async getTodayWrongQuizzesRaw(requestParameters: GetTodayWrongQuizzesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<QuizResponse>>> {
        const queryParameters: any = {};

        if (requestParameters['userNo'] != null) {
            queryParameters['userNo'] = requestParameters['userNo'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/quizzes/today/wrong`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(QuizResponseFromJSON));
    }

    /**
     * 오늘 풀었던 퀴즈 중 틀렸거나 건너뛴 퀴즈들을 조회합니다.
     * 오늘 오답 퀴즈 조회
     */
    async getTodayWrongQuizzes(requestParameters: GetTodayWrongQuizzesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<QuizResponse>> {
        const response = await this.getTodayWrongQuizzesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 사용자 번호로 사용자 정보를 조회합니다.
     * 사용자 조회
     */
    async getUserByIdRaw(requestParameters: GetUserByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Response>> {
        if (requestParameters['userNo'] == null) {
            throw new runtime.RequiredError(
                'userNo',
                'Required parameter "userNo" was null or undefined when calling getUserById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/users/{userNo}`;
        urlPath = urlPath.replace(`{${"userNo"}}`, encodeURIComponent(String(requestParameters['userNo'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseFromJSON(jsonValue));
    }

    /**
     * 사용자 번호로 사용자 정보를 조회합니다.
     * 사용자 조회
     */
    async getUserById(requestParameters: GetUserByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Response> {
        const response = await this.getUserByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 닉네임으로 사용자 정보를 조회합니다.
     * 닉네임으로 사용자 조회
     */
    async getUserByNicknameRaw(requestParameters: GetUserByNicknameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Response>> {
        if (requestParameters['nickname'] == null) {
            throw new runtime.RequiredError(
                'nickname',
                'Required parameter "nickname" was null or undefined when calling getUserByNickname().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/users/nickname/{nickname}`;
        urlPath = urlPath.replace(`{${"nickname"}}`, encodeURIComponent(String(requestParameters['nickname'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseFromJSON(jsonValue));
    }

    /**
     * 닉네임으로 사용자 정보를 조회합니다.
     * 닉네임으로 사용자 조회
     */
    async getUserByNickname(requestParameters: GetUserByNicknameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Response> {
        const response = await this.getUserByNicknameRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 사용자의 연속 일기 작성 카운트를 증가시킵니다.
     * 스트릭 카운트 증가
     */
    async increaseStreakCountRaw(requestParameters: IncreaseStreakCountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserBadgeResponse>> {
        if (requestParameters['userNo'] == null) {
            throw new runtime.RequiredError(
                'userNo',
                'Required parameter "userNo" was null or undefined when calling increaseStreakCount().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/users/{userNo}/streak`;
        urlPath = urlPath.replace(`{${"userNo"}}`, encodeURIComponent(String(requestParameters['userNo'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserBadgeResponseFromJSON(jsonValue));
    }

    /**
     * 사용자의 연속 일기 작성 카운트를 증가시킵니다.
     * 스트릭 카운트 증가
     */
    async increaseStreakCount(requestParameters: IncreaseStreakCountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserBadgeResponse> {
        const response = await this.increaseStreakCountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 카카오 계정으로 로그인 또는 자동 회원가입합니다.
     * 카카오 로그인
     */
    async kakaoLoginRaw(requestParameters: KakaoLoginOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LoginResponse>> {
        if (requestParameters['kakaoLoginRequest'] == null) {
            throw new runtime.RequiredError(
                'kakaoLoginRequest',
                'Required parameter "kakaoLoginRequest" was null or undefined when calling kakaoLogin().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/auth/kakao-login`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: KakaoLoginRequestToJSON(requestParameters['kakaoLoginRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LoginResponseFromJSON(jsonValue));
    }

    /**
     * 카카오 계정으로 로그인 또는 자동 회원가입합니다.
     * 카카오 로그인
     */
    async kakaoLogin(requestParameters: KakaoLoginOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LoginResponse> {
        const response = await this.kakaoLoginRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 닉네임과 비밀번호로 로그인합니다.
     * 일반 로그인
     */
    async loginRaw(requestParameters: LoginOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LoginResponse>> {
        if (requestParameters['loginRequest'] == null) {
            throw new runtime.RequiredError(
                'loginRequest',
                'Required parameter "loginRequest" was null or undefined when calling login().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/auth/login`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LoginRequestToJSON(requestParameters['loginRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LoginResponseFromJSON(jsonValue));
    }

    /**
     * 닉네임과 비밀번호로 로그인합니다.
     * 일반 로그인
     */
    async login(requestParameters: LoginOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LoginResponse> {
        const response = await this.loginRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 현재 세션을 종료합니다.
     * 로그아웃
     */
    async logoutRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LoginResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/auth/logout`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LoginResponseFromJSON(jsonValue));
    }

    /**
     * 현재 세션을 종료합니다.
     * 로그아웃
     */
    async logout(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LoginResponse> {
        const response = await this.logoutRaw(initOverrides);
        return await response.value();
    }

    /**
     * 퀴즈의 정답을 제출하거나 건너뛰기를 처리합니다.
     * 퀴즈 정답 제출
     */
    async submitQuizRaw(requestParameters: SubmitQuizRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['quizSubmitRequest'] == null) {
            throw new runtime.RequiredError(
                'quizSubmitRequest',
                'Required parameter "quizSubmitRequest" was null or undefined when calling submitQuiz().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/quizzes/submit`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: QuizSubmitRequestToJSON(requestParameters['quizSubmitRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 퀴즈의 정답을 제출하거나 건너뛰기를 처리합니다.
     * 퀴즈 정답 제출
     */
    async submitQuiz(requestParameters: SubmitQuizRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.submitQuizRaw(requestParameters, initOverrides);
    }

    /**
     * 기존 뱃지 정보를 수정합니다.
     * 뱃지 수정
     */
    async updateBadgeRaw(requestParameters: UpdateBadgeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BadgeResponse>> {
        if (requestParameters['badgeId'] == null) {
            throw new runtime.RequiredError(
                'badgeId',
                'Required parameter "badgeId" was null or undefined when calling updateBadge().'
            );
        }

        if (requestParameters['badgeRequest'] == null) {
            throw new runtime.RequiredError(
                'badgeRequest',
                'Required parameter "badgeRequest" was null or undefined when calling updateBadge().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/badges/{badgeId}`;
        urlPath = urlPath.replace(`{${"badgeId"}}`, encodeURIComponent(String(requestParameters['badgeId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: BadgeRequestToJSON(requestParameters['badgeRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BadgeResponseFromJSON(jsonValue));
    }

    /**
     * 기존 뱃지 정보를 수정합니다.
     * 뱃지 수정
     */
    async updateBadge(requestParameters: UpdateBadgeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BadgeResponse> {
        const response = await this.updateBadgeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 기존 일기를 수정합니다.
     * 일기 수정
     */
    async updateRecordRaw(requestParameters: UpdateRecordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['recordId'] == null) {
            throw new runtime.RequiredError(
                'recordId',
                'Required parameter "recordId" was null or undefined when calling updateRecord().'
            );
        }

        if (requestParameters['recordCreateRequest'] == null) {
            throw new runtime.RequiredError(
                'recordCreateRequest',
                'Required parameter "recordCreateRequest" was null or undefined when calling updateRecord().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['userNo'] != null) {
            queryParameters['userNo'] = requestParameters['userNo'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/records/{recordId}`;
        urlPath = urlPath.replace(`{${"recordId"}}`, encodeURIComponent(String(requestParameters['recordId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RecordCreateRequestToJSON(requestParameters['recordCreateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * 기존 일기를 수정합니다.
     * 일기 수정
     */
    async updateRecord(requestParameters: UpdateRecordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.updateRecordRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 사용자 정보를 수정합니다.
     * 사용자 정보 수정
     */
    async updateUserRaw(requestParameters: UpdateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Response>> {
        if (requestParameters['userNo'] == null) {
            throw new runtime.RequiredError(
                'userNo',
                'Required parameter "userNo" was null or undefined when calling updateUser().'
            );
        }

        if (requestParameters['updateRequest'] == null) {
            throw new runtime.RequiredError(
                'updateRequest',
                'Required parameter "updateRequest" was null or undefined when calling updateUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/users/{userNo}`;
        urlPath = urlPath.replace(`{${"userNo"}}`, encodeURIComponent(String(requestParameters['userNo'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateRequestToJSON(requestParameters['updateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseFromJSON(jsonValue));
    }

    /**
     * 사용자 정보를 수정합니다.
     * 사용자 정보 수정
     */
    async updateUser(requestParameters: UpdateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Response> {
        const response = await this.updateUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
