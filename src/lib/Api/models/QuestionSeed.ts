/* tslint:disable */
/* eslint-disable */
/**
 * Thinkeep API
 * 일기 작성 및 관리 API 문서
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@thinkeep.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface QuestionSeed
 */
export interface QuestionSeed {
    /**
     * 
     * @type {string}
     * @memberof QuestionSeed
     */
    questionId?: string;
    /**
     * 
     * @type {string}
     * @memberof QuestionSeed
     */
    question?: string;
    /**
     * 
     * @type {string}
     * @memberof QuestionSeed
     */
    answer?: string;
    /**
     * 
     * @type {Date}
     * @memberof QuestionSeed
     */
    date?: Date;
    /**
     * 
     * @type {number}
     * @memberof QuestionSeed
     */
    recordId?: number;
}

/**
 * Check if a given object implements the QuestionSeed interface.
 */
export function instanceOfQuestionSeed(value: object): value is QuestionSeed {
    return true;
}

export function QuestionSeedFromJSON(json: any): QuestionSeed {
    return QuestionSeedFromJSONTyped(json, false);
}

export function QuestionSeedFromJSONTyped(json: any, ignoreDiscriminator: boolean): QuestionSeed {
    if (json == null) {
        return json;
    }
    return {
        
        'questionId': json['questionId'] == null ? undefined : json['questionId'],
        'question': json['question'] == null ? undefined : json['question'],
        'answer': json['answer'] == null ? undefined : json['answer'],
        'date': json['date'] == null ? undefined : (new Date(json['date'])),
        'recordId': json['recordId'] == null ? undefined : json['recordId'],
    };
}

export function QuestionSeedToJSON(json: any): QuestionSeed {
    return QuestionSeedToJSONTyped(json, false);
}

export function QuestionSeedToJSONTyped(value?: QuestionSeed | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'questionId': value['questionId'],
        'question': value['question'],
        'answer': value['answer'],
        'date': value['date'] == null ? undefined : ((value['date']).toISOString().substring(0,10)),
        'recordId': value['recordId'],
    };
}

