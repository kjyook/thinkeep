/* tslint:disable */
/* eslint-disable */
/**
 * Thinkeep API
 * 일기 작성 및 관리 API 문서
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@thinkeep.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Record
 */
export interface Record {
    /**
     * 
     * @type {number}
     * @memberof Record
     */
    recordId?: number;
    /**
     * 
     * @type {number}
     * @memberof Record
     */
    userNo?: number;
    /**
     * 
     * @type {Date}
     * @memberof Record
     */
    date?: Date;
    /**
     * 
     * @type {string}
     * @memberof Record
     */
    answers?: string;
    /**
     * 
     * @type {string}
     * @memberof Record
     */
    emotion?: string;
    /**
     * 
     * @type {string}
     * @memberof Record
     */
    personCategory?: string;
    /**
     * 
     * @type {string}
     * @memberof Record
     */
    personName?: string;
    /**
     * 
     * @type {string}
     * @memberof Record
     */
    voiceText?: string;
    /**
     * 
     * @type {string}
     * @memberof Record
     */
    editableText?: string;
    /**
     * 
     * @type {string}
     * @memberof Record
     */
    submittedAnswer?: string;
    /**
     * 
     * @type {Date}
     * @memberof Record
     */
    createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof Record
     */
    updatedAt?: Date;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof Record
     */
    answersAsMap?: { [key: string]: string; };
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof Record
     */
    answersFromMap?: { [key: string]: string; };
    /**
     * 
     * @type {boolean}
     * @memberof Record
     */
    complete?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Record
     */
    today?: boolean;
    /**
     * 
     * @type {number}
     * @memberof Record
     */
    answerCount?: number;
}

/**
 * Check if a given object implements the Record interface.
 */
export function instanceOfRecord(value: object): value is Record {
    return true;
}

export function RecordFromJSON(json: any): Record {
    return RecordFromJSONTyped(json, false);
}

export function RecordFromJSONTyped(json: any, ignoreDiscriminator: boolean): Record {
    if (json == null) {
        return json;
    }
    return {
        
        'recordId': json['recordId'] == null ? undefined : json['recordId'],
        'userNo': json['userNo'] == null ? undefined : json['userNo'],
        'date': json['date'] == null ? undefined : (new Date(json['date'])),
        'answers': json['answers'] == null ? undefined : json['answers'],
        'emotion': json['emotion'] == null ? undefined : json['emotion'],
        'personCategory': json['personCategory'] == null ? undefined : json['personCategory'],
        'personName': json['personName'] == null ? undefined : json['personName'],
        'voiceText': json['voiceText'] == null ? undefined : json['voiceText'],
        'editableText': json['editableText'] == null ? undefined : json['editableText'],
        'submittedAnswer': json['submittedAnswer'] == null ? undefined : json['submittedAnswer'],
        'createdAt': json['createdAt'] == null ? undefined : (new Date(json['createdAt'])),
        'updatedAt': json['updatedAt'] == null ? undefined : (new Date(json['updatedAt'])),
        'answersAsMap': json['answersAsMap'] == null ? undefined : json['answersAsMap'],
        'answersFromMap': json['answersFromMap'] == null ? undefined : json['answersFromMap'],
        'complete': json['complete'] == null ? undefined : json['complete'],
        'today': json['today'] == null ? undefined : json['today'],
        'answerCount': json['answerCount'] == null ? undefined : json['answerCount'],
    };
}

export function RecordToJSON(json: any): Record {
    return RecordToJSONTyped(json, false);
}

export function RecordToJSONTyped(value?: Record | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'recordId': value['recordId'],
        'userNo': value['userNo'],
        'date': value['date'] == null ? undefined : ((value['date']).toISOString().substring(0,10)),
        'answers': value['answers'],
        'emotion': value['emotion'],
        'personCategory': value['personCategory'],
        'personName': value['personName'],
        'voiceText': value['voiceText'],
        'editableText': value['editableText'],
        'submittedAnswer': value['submittedAnswer'],
        'createdAt': value['createdAt'] == null ? undefined : ((value['createdAt']).toISOString()),
        'updatedAt': value['updatedAt'] == null ? undefined : ((value['updatedAt']).toISOString()),
        'answersAsMap': value['answersAsMap'],
        'answersFromMap': value['answersFromMap'],
        'complete': value['complete'],
        'today': value['today'],
        'answerCount': value['answerCount'],
    };
}

